{"version":3,"sources":["re_com/nested_v_grid/util.cljc"],"mappings":"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","names":["re-com.nested-v-grid.util/path->grid-line-name","path","cljs.core/hash","re-com.nested-v-grid.util/branch?","cljs.core/sequential?","re-com.nested-v-grid.util/children","cljs.core.comp","cljs.core/seq","cljs.core/rest","re-com.nested-v-grid.util/get-header-spec","cljs.core/first","var_args","G__73515","re-com.nested-v-grid.util/header-size","js/Error","header","cljs.core.get","default-size","re-com.nested-v-grid.util/remove-size","m","G__73521","cljs.core/map?","cljs.core.dissoc","re-com.nested-v-grid.util/ancestry","acc","ancestor","cljs.core/empty?","cljs.core.conj","cljs.core/pop","re-com.nested-v-grid.util/intersection?","x1","size","window-start","window-end","re-com.nested-v-grid.util/evict!","cache","tree","keypath","cljs.core.apply","cljs.core/dissoc","cljs.core.into","p1__73527#","cljs.core.map","cljs.core.get_in","p__73547","map__73549","cljs.core/--destructure-map","re-com.nested-v-grid.util/window","header-tree","size-cache","show-branch-cells?","hide-root?","skip-tail?","cache-fn","lookup-fn","cljs.core/volatile!","js/Number.POSITIVE_INFINITY","cljs.core/deref","sum-size","depth","paths","keypaths","sizes","sums","nodes-traversed","spans","cache!","or__5043__auto__","p1__73532#","p2__73533#","cljs.core/-vreset!","cljs.core/-deref","cljs.core.assoc","lookup!","p1__73534#","cached-sum-size","cached-depth","walk","p__73561","map__73562","node","collect-anyway?","is-leaf?","branch-end?","last-child?","hide?","goog/DEBUG","sum","passed-tail?","and__5041__auto__","csize","skippable?","children","children?","cacheable?","cljs.core/not","show-after?","add-after?","after-child","cljs.core/vec","all-children","G__73587","own-path","own-size","re_com$nested_v_grid$util$window_$_walk","descend-tx","cljs.core.map_indexed","i","subtree","cljs.core.merge","G__73610","cljs.core.not_EQ_","cljs.core._EQ_","cljs.core/count","child-sizes","cljs.core.filter","cljs.core/some?","cljs.core.transduce","cljs.core/conj","total-size","cljs.core.reduce","cljs.core/+","cljs.core.remove","cljs.core/zero?","cljs.core.update","leaf-path","show-above?","show?","leaf-size","re_com.nested_v_grid.util.header_size","new-path","G__73650","cljs.core.mapv","cljs.core.vary_meta","cljs.core/merge","x__5128__auto__","y__5129__auto__","G__73666","G__73667","p__73671","map__73672","re-com.nested-v-grid.util/grid-tokens","header-paths","positions","G__73685","vec__73690","seq__73691","first__73692","cljs.core/next","G__73686","vec__73693","seq__73694","first__73695","G__73687","vec__73696","seq__73697","first__73698","vec__73699","cljs.core.nth","vec__73732","seq__73733","first__73734","vec__73735","seq__73736","first__73737","vec__73738","seq__73739","first__73740","vec__73741","rest-paths","rest-sizes","position","next-position","rest-positions","result","map__73745","cljs.core/meta","cljs.core/peek","spacer?","next-result","G__73748","re-com.nested-v-grid.util/grid-template","header-traversal","clojure.string/replace","clojure.string.join","p1__73749#","cljs.core/vector?","G__73754","re-com.nested-v-grid.util/grid-cross-template","args-arr__5791__auto__","len__5766__auto__","i__5767__auto__","argseq__5792__auto__","cljs.core/IndexedSeq","seq73752","G__73753","self__5751__auto__","tokens","more-tokens","re_com.nested_v_grid.util.grid_cross_template","cljs.core/concat","rf","s","group","re-com.util/px","cljs.core.partition_by","cljs.core.some_fn","cljs.core/number?","cljs.core/string?","re-com.nested-v-grid.util/grid-spans","grid-tokens","results","seq__73771","chunk__73772","count__73773","i__73774","temp__5804__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","p","cljs.core/inc","G__73783","re-com.nested-v-grid.util/upgrade-header-tree-schema","re_com.nested_v_grid.util.upgrade_header_tree_schema","vec__73794","seq__73795","first__73796","vec__73797","l","r","remainder","cljs.core.take_while","new-remainder","cljs.core.drop","cljs.core/into","cljs.core.partial"],"sourcesContent":["(ns re-com.nested-v-grid.util\n  (:require [clojure.string :as str]\n            #?@(:cljs [[re-com.util :as u]\n                       goog.string])))\n\n(defn path->grid-line-name [path]\n  (str \"rc\" (hash path)))\n\n(def branch? sequential?)\n\n(def children (comp seq rest))\n\n(def get-header-spec first)\n\n(defn header-size\n  ([header] (get header :size))\n  ([header default-size] (get header :size default-size)))\n\n(defn remove-size [m]\n  (cond-> m (map? m) (dissoc :size)))\n\n(defn ancestry [path]\n  (loop [acc [] ancestor path]\n    (if (empty? ancestor)\n      acc\n      (recur (conj acc ancestor) (pop ancestor)))))\n\n(defn intersection? [x1 size window-start window-end]\n  (and (<= x1 window-end)\n       (>= (+ x1 size) window-start)))\n\n(defn evict! [cache tree keypath]\n  (apply dissoc cache (into [tree]\n                            (map #(get-in tree %))\n                            (ancestry keypath))))\n\n(defn window [{:keys [window-start\n                      window-end\n                      header-tree\n                      size-cache\n                      default-size\n                      show-branch-cells?\n                      hide-root?\n                      skip-tail?\n                      cache-fn\n                      lookup-fn]\n               :or   {skip-tail?   true\n                      size-cache   (volatile! {})\n                      window-end   js/Number.POSITIVE_INFINITY\n                      default-size 20}}]\n  (let [sum-size        (volatile! 0)\n        depth           (volatile! 0)\n        paths           (volatile! [])\n        keypaths        (volatile! [])\n        sizes           (volatile! [])\n        sums            (volatile! [])\n        nodes-traversed (volatile! [])\n        spans           (volatile! {})\n        cache!          (or cache-fn #(vswap! size-cache assoc %1 %2))\n        lookup!         (or lookup-fn #(get @size-cache %))\n        cached-sum-size (lookup! header-tree)\n        cached-depth    (lookup! :depth)\n        walk\n        (fn walk [path node & {:keys [keypath collect-anyway? is-leaf? branch-end? last-child? hide?]\n                               :or   {is-leaf? true\n                                      keypath  []}}]\n          (when goog/DEBUG\n            (vswap! nodes-traversed conj node))\n          (let [sum          @sum-size\n                passed-tail? (and skip-tail? cached-sum-size (> sum window-end))]\n            (cond\n              passed-tail?   nil\n              (branch? node) (let [csize        (lookup! node)\n                                   skippable?   (and csize (not (intersection? sum csize window-start window-end)))\n                                   children     (children node)\n                                   children?    (seq children)\n                                   cacheable?   (and (not csize) children?)\n                                   show-after?  (or show-branch-cells? (get (get-header-spec node) :show-after?))\n                                   add-after?   (and (not hide?) children?)\n                                   after-child  [(first node)]\n                                   children     (vec children)\n                                   all-children (cond-> children\n                                                  (and show-after? add-after?) (conj after-child))]\n                               (if skippable?\n                                 (do (vswap! sum-size + csize) csize)\n                                 (let [is-leaf?   (not (seq all-children))\n                                       own-path   (conj path (get-header-spec node))\n                                       own-size   (walk path (get-header-spec node) {:collect-anyway? true\n                                                                                     :is-leaf?        is-leaf?\n                                                                                     :branch-path?    (not is-leaf?)\n                                                                                     :keypath         (conj keypath 0)\n                                                                                     :branch-end?     branch-end?\n                                                                                     :last-child?     last-child?})\n                                       descend-tx (map-indexed\n                                                   (fn [i subtree]\n                                                     (walk own-path\n                                                           subtree\n                                                           (merge {:keypath     (cond-> keypath\n                                                                                  (not= after-child subtree)\n                                                                                  (conj (inc i)))\n                                                                   :is-leaf?    true\n                                                                   :branch-end? (= after-child subtree)}\n                                                                  (when (= i (- (count children) (when add-after? 1)))\n                                                                    {:last-child? true})))))\n                                       child-sizes (filter some? (transduce descend-tx conj all-children))\n                                       total-size (reduce + own-size (remove zero? child-sizes))]\n                                   (vswap! spans update own-path + (count child-sizes))\n                                   (when-not (intersection? sum total-size window-start window-end)\n                                     (vswap! paths pop)\n                                     (vswap! sums pop)\n                                     (vswap! sizes pop)\n                                     (vswap! keypaths pop))\n                                   (when cacheable?\n                                     (cache! node total-size))\n                                   total-size)))\n              :else          (let [leaf-path   (conj path node)\n                                   show-above? (get node :show-above?)\n                                   show?       (or is-leaf? show-above?)\n                                   leaf-size   (if-not (or is-leaf? show-above?)\n                                                 0\n                                                 (header-size node default-size))]\n                               (when (or (intersection? sum leaf-size window-start window-end)\n                                         collect-anyway?)\n                                 (let [new-path (cond-> (mapv remove-size leaf-path)\n                                                  (or is-leaf? show-above?)\n                                                  (vary-meta merge {}\n                                                             (when is-leaf? {:leaf? true})\n                                                             (when-not is-leaf? {:branch? true})\n                                                             (when branch-end? {:branch-end? true})\n                                                             (when show-above? {:show-above? true})\n                                                             (when last-child? {:last-child? true})))]\n                                   #_(when show?\n                                       (vswap! spans\n                                               (fn [m] (reduce #(update %1 %2 inc) m (ancestry leaf-path)))))\n                                   (vswap! depth max cached-depth (count new-path))\n                                   (vswap! paths conj new-path)\n                                   (vswap! sums conj sum)\n                                   (vswap! sizes conj leaf-size)\n                                   (vswap! keypaths conj keypath)))\n                               (vswap! sum-size + leaf-size)\n                               leaf-size))))]\n    (walk [] header-tree {:hide? hide-root?})\n    (cache! :depth @depth)\n    {:sum-size        (or cached-sum-size @sum-size)\n     :spans           @spans\n     :positions       @sums\n     :depth           @depth\n     :header-paths    @paths\n     :keypaths        @keypaths\n     :sizes           @sizes\n     :window-start    window-start\n     :window-end      window-end\n     :nodes-traversed @nodes-traversed}))\n\n(defn grid-tokens\n  [{:keys [header-paths sizes positions sum-size]}]\n  (into [\"[start]\"]\n        (loop [[path & rest-paths]                    header-paths\n               [size & rest-sizes]                    sizes\n               [position\n                & [next-position :as rest-positions]] (conj positions sum-size)\n               result                                 []]\n          (let [{:keys [show-above?] :or {show-above? (:leaf? (meta path))}}\n                (peek path)\n                spacer?     (not= next-position (+ position size))\n                next-result (cond-> result\n                              :do         (conj path)\n                              show-above? (conj (or size 0))\n                              spacer?     (conj \"[spacer]\"\n                                                (- next-position size position)))]\n            (if (empty? rest-sizes)\n              (conj next-result \"[end]\")\n              (recur rest-paths rest-sizes rest-positions next-result))))))\n\n(defn grid-template [header-traversal]\n  (str/replace\n   (str/join \" \"\n             (map #(cond (string? %) %\n                         (vector? %) (str \"[\" (path->grid-line-name %) \"]\")\n                         (number? %) (str % \"px\"))\n                  (grid-tokens header-traversal)))\n   \"] [\" \" \"))\n\n(defn grid-cross-template\n  ([tokens & more-tokens]\n   (grid-cross-template (apply concat tokens more-tokens)))\n  ([tokens]\n   (let [rf (fn [s group]\n              (str s \" \"\n                   (cond (number? (first group))\n                         (str/join \" \" (map u/px group))\n                         (string? (first group))\n                         (str/join \" \" group)\n                         :else\n                         (str \"[\" (str/join \" \" (map path->grid-line-name group)) \"]\"))))]\n     (str\n      (->> tokens\n           (partition-by (some-fn number? string?))\n           (reduce rf \"\"))\n      #_\" [end]\"))))\n\n#?(:cljs\n   (defn grid-spans [grid-tokens]\n     (let [results (volatile! {})]\n       (mapv (fn [path]\n               (doseq [p (ancestry path)]\n                 (vswap! results update p inc)))\n             grid-tokens)\n       @results)))\n\n(defn upgrade-header-tree-schema\n  ([tree]\n   (upgrade-header-tree-schema [:root] tree))\n  ([acc tree]\n   (if-not (vector? tree)\n     [tree]\n     (let [[l & [r :as remainder]] tree]\n       (cond\n         (not l)           acc\n         (vector? l)       (recur (into acc (upgrade-header-tree-schema [] l))\n                                  (vec remainder))\n         (not (vector? r)) (recur (conj acc [l])\n                                  (vec remainder))\n         :else             (let [children      (take-while vector? remainder)\n                                 new-remainder (vec (drop (count children) remainder))]\n                             (recur (conj acc (reduce into [l]\n                                                      (map (partial upgrade-header-tree-schema [])\n                                                           children)))\n                                    new-remainder)))))))\n"]}