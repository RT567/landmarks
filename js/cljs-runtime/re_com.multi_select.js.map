{"version":3,"sources":["re_com/multi_select.cljs"],"mappings":"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","names":["re-com.multi-select/items-with-group-headings","items","group-fn","id-fn","groups","cljs.core.partition_by","group-headers","cljs.core.map","cljs.core/first","p1__73088#","cljs.core/PersistentHashMap","re-com.multi-select/filter-items","filter-fn","filter-text","lower-filter-text","clojure.string/lower-case","item","group","or__5043__auto__","label","clojure.string/includes?","re-com.multi-select/filter-items-regex","re","e73112","js/RegExp","js/Object","e","cljs.core.partial","p1__73122#","re-com.multi-select/filter-text-box","*filter-text","placeholder","*warning-message","disabled?","parts","re-com.box/h-box","cljs.core.get_in","cljs.core.merge","re-com.input-text/input-text","cljs.core/reset!","re-com.close-button/close-button","re-com.multi-select/group-heading-item","*mouse-over?","reagent.core.atom","p__73137","map__73139","cljs.core/--destructure-map","cljs.core.get","heading","click-callback","double-click-callback","selected-item-id","id","selected?","cljs.core._EQ_","class","cljs.core/deref","event","re-com.multi-select/list-item","p__73155","map__73156","label-fn","group-selected?","cljs.core/not","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","re-com.multi-select/list-box","p__73186","map__73187","seq73172","self__5752__auto__","cljs.core/seq","*current-item-id","group-heading-selected?","filter-choices-text","src","vec__73206","cljs.core.nth","group-names","group-item-lists","has-group-names?","cljs.core/count","make-list-item","make-items","cljs.core.doall","make-group-heading-item","make-heading-then-items","cljs.core/cons","re-com.box/box","cljs.core.apply","cljs.core/concat","clojure.string/blank?","re-com.multi-select/multi-select-parts-desc","re-com.config/include-args-desc?","re-com.multi-select/multi-select-parts","cljs.core/set","re-com.multi-select/multi-select-args-desc","re-com.validate/vector-of-maps?","cljs.core/ifn?","re-com.validate/string-or-hiccup?","cljs.core/fn?","cljs.core/string?","re-com.validate/number-or-string?","re-com.validate/css-class?","re-com.validate/css-style?","re-com.validate/html-attr?","re-com.validate/parts?","cljs.core/map?","re-com.multi-select/multi-select","p__73361","map__73362","seq73353","model","sort-fn","cljs.core/identity","args","js/goog.DEBUG","re-com.validate/validate-args","re-com.validate/extract-arg-data","*external-model","re-com.util/deref-or-value","*internal-model","*current-choice-id","*current-selection-id","*choice-group-heading-selected?","*selection-group-heading-selected?","*filter-choices-text","*filter-selections-text","button-style","p__73384","map__73386","choices","required?","max-selected-items","left-label","right-label","on-change","filter-box?","regex-filter?","width","height","max-height","tab-index","style","attr","cljs.core/compare","min-msg","max-msg","*latest-ext-model","_","cljs.core.not_EQ_","changeable?","and__5041__auto__","excludable?","cljs.core.comp","cljs.core/str","choices-filter-fn","filtered-choices","cljs.core.into","p1__73318#","cljs.core.remove","cljs.core/contains?","cljs.core.filter","cljs.core.sort_by","selections","p1__73319#","re_com.util.item_for_id","selections-filter-fn","filtered-selections","potential-count","clojure.set.difference","chosen-count","choice-click","selection-click","include-filtered-click","cljs.core.concat","G__73429","include-click","choices-to-include","cljs.core.swap_BANG_","cljs.core/conj","G__73449","exclude-click","new-internal-model","cljs.core/empty?","cljs.core/PersistentHashSet","cljs.core/disj","G__73459","exclude-filtered-click","G__73469","re-com.theme/merge-class","re-com.box/flex-child-style","re-com.box/align-style","re-com.debug/->attr","re-com.box/v-box","G__73479","G__73480","G__73482","G__73483","re-com.util/pluralize","re-com.box/gap","re-com.text/label","goog.string/unescapeEntities","G__73508","G__73509","re_com.util.pluralize","G__73513","G__73514","re-com.buttons/button","cljs.core.gensym","G__73568","G__73569","G__73581","G__73582","G__73588","G__73589","G__73614","G__73615"],"sourcesContent":["(ns re-com.multi-select\n  (:require-macros\n   [re-com.core     :refer [handler-fn at]]\n   [re-com.validate :refer [validate-args-macro]])\n  (:require\n   [clojure.set                 :as set]\n   [clojure.string              :as string]\n   [goog.string                 :as gstring]\n   [re-com.config               :refer [include-args-desc?]]\n   [re-com.debug                :refer [->attr]]\n   [re-com.input-text           :refer [input-text]]\n   [re-com.box                  :as box]\n   [re-com.text                 :as text]\n   [re-com.buttons              :as buttons]\n   [re-com.close-button         :as close-button]\n   [re-com.theme                :as theme]\n   [re-com.util                 :as rc.util :refer [deref-or-value]]\n   [re-com.validate             :as validate :refer [string-or-hiccup? parts? css-class?]]\n   [reagent.core                :as reagent]))\n\n(defn items-with-group-headings\n  \"Split a list of maps by a group key then return both the group\"\n  [items group-fn id-fn]\n  (let [groups         (partition-by group-fn items)\n        group-headers  (->> groups\n                            (map first)\n                            (map #(hash-map :id    [(group-fn %) (id-fn %)]\n                                            :group (group-fn %))))]\n    ;; Sample output:\n    ;; group-headers    ({:group \"Fruits\"     :id \"Fruits\"}\n    ;;                   {:group \"Vegetables\" :id \"Vegetables\"})\n    ;;\n    ;; groups           (({:short \"Watermelon\" :id \"0001\" :display-type \"fruit\"     :sort 110 ...}\n    ;;                    {:short \"Strawberry\" :id \"0002\" :display-type \"fruit\"     :sort 120 ...}\n    ;;                    {:short \"Cherry\"     :id \"0003\" :display-type \"fruit\"     :sort 130 ...})\n    ;;                   ({:short \"Corn\"       :id \"0004\" :display-type \"vegetable\" :sort 430 ...}))\n    [group-headers groups]))\n\n(defn filter-items\n  \"Filter a list of items based on a filter string using plain string searches (case insensitive). Less powerful\n   than regex's but no confusion with reserved characters\"\n  [group-fn filter-fn filter-text]\n  (let [lower-filter-text (string/lower-case filter-text)]\n    (fn [item]\n      (let [group (or (group-fn item) \"\")\n            label (str (filter-fn item))] ;; Need str for non-string labels like hiccup\n        (or\n         (string/includes? (string/lower-case group) lower-filter-text)\n         (string/includes? (string/lower-case label) lower-filter-text))))))\n\n(defn filter-items-regex\n  \"Filter a list of items based on a filter string using regex's (case insensitive). More powerful but can cause\n   confusion for users entering reserved characters such as [ ] * + . ( ) etc.\"\n  [group-fn filter-fn filter-text]\n  (let [re (try\n             (js/RegExp. filter-text \"i\")\n             (catch js/Object e nil))]\n    (partial (fn [re item]\n               (when-not (nil? re)\n                 (or (.test re (group-fn item)) (.test re (filter-fn item)))))\n             re)))\n\n(defn filter-text-box\n  \"Base function (before lifecycle metadata) to render a filter text box\"\n  [*filter-text placeholder *warning-message disabled? parts]\n  [box/h-box\n   :class    (str \"rc-multi-select-filter-text-box \" (get-in parts [:filter-text-box :class]))\n   :attr     (get-in parts [:filter-text-box :attr])\n   :width    \"100%\"\n   :align    :center\n   :style    (merge {:position \"relative\"}\n                    (get-in parts [:filter-text-box :style]))\n   :children [[input-text\n               :class           (str \"rc-multi-select-filter-input-text \" (get-in parts [:filter-input-text :class]))\n               :model           *filter-text\n               :change-on-blur? false\n               :placeholder     placeholder\n               ;:disabled?       disabled? ;; Left here just in case we DO want to prevent searches while disabled\n               :width           \"100%\"\n               :height          \"28px\"\n               :style           (merge {:padding \"3px 4px\"}\n                                       (get-in parts [:filter-input-text :style]))\n               :attr            (get-in parts [:filter-input-text :attr])\n               :on-change       #(do (reset! *filter-text %)\n                                     (reset! *warning-message nil))]\n              [close-button/close-button\n               :class       (get-in parts [:filter-reset-button :class])\n               :style       (get-in parts [:filter-reset-button :style])\n               :attr        (get-in parts [:filter-reset-button :attr])\n               :on-click    #(reset! *filter-text \"\")\n               :div-size    0\n               :font-size   20\n               :left-offset -13]]])\n\n(defn group-heading-item\n  \"Render a group heading and set up appropriate mouse events\"\n  []\n  (let [*mouse-over? (reagent/atom false)]\n    (fn group-heading-render\n      [& {:keys [heading disabled? click-callback double-click-callback selected-item-id]}]\n      (let [id        (:id heading)\n            selected? (= selected-item-id id)\n            class     (if selected?\n                        \"highlighted\"\n                        (when @*mouse-over? \"mouseover\"))]\n        [:li.group-result\n         {:class           class\n          :style           (merge {:padding-left \"6px\"\n                                   :cursor       (when-not disabled? \"pointer\")\n                                   :color        (if selected? \"white\" \"#444\")}\n                                  (when disabled?\n                                    {:pointer-events \"none\"}))\n          :on-mouse-over   (handler-fn (reset! *mouse-over? true))\n          :on-mouse-out    (handler-fn (reset! *mouse-over? false))\n          :on-click        (when-not disabled? (handler-fn (click-callback id true))) ;; true = group-heading item selected\n          :on-double-click (when-not disabled? (handler-fn (double-click-callback id)))}\n         (:group heading)]))))\n\n(defn list-item\n  \"Render a list item and set up appropriate mouse events\"\n  []\n  (let [*mouse-over? (reagent/atom false)]\n    (fn list-item-render\n      [& {:keys [item id-fn label-fn disabled? click-callback double-click-callback selected-item-id group-selected?]}]\n      (let [id              (id-fn item)\n            selected?       (= id selected-item-id)\n            class           (if (and selected? (not disabled?))\n                              \"highlighted\"\n                              (when @*mouse-over? \"mouseover\"))]\n        [:li\n         {:class           (str \"active-result group-option \" class)\n          :style           (merge (when group-selected? {:background-color \"hsl(208, 56%, 92%)\"})\n                                  (when disabled? {:cursor         \"default\"\n                                                   :pointer-events \"none\"}))\n          :on-mouse-over   (handler-fn (reset! *mouse-over? true))\n          :on-mouse-out    (handler-fn (reset! *mouse-over? false))\n          :on-click        (when-not disabled? (handler-fn (click-callback id false))) ;; false = group-heading item NOT selected\n          :on-double-click (when-not disabled? (handler-fn (double-click-callback id)))}\n         (label-fn item)]))))\n\n(defn list-box\n  \"Render a list box which can be a single list or a grouped list\"\n  [& {:keys [items id-fn label-fn group-fn disabled? *current-item-id group-heading-selected? click-callback double-click-callback filter-choices-text src]}]\n  (let [[group-names group-item-lists] (items-with-group-headings items group-fn id-fn)\n        has-group-names?               (not (and (nil? (:group (first group-names))) (= 1 (count group-item-lists)))) ;; if 0 or 1 group names, no headings to display\n        make-list-item                 (fn [item]\n                                         ^{:key (str (id-fn item))}\n                                         [list-item\n                                          :item                  item\n                                          :id-fn                 id-fn\n                                          :label-fn              label-fn\n                                          :disabled?             disabled?\n                                          :click-callback        click-callback\n                                          :double-click-callback double-click-callback\n                                          :selected-item-id      @*current-item-id\n                                          :group-selected?       (when group-heading-selected? (= (first @*current-item-id) (group-fn item)))]) ;; for group headings, group-label is the first item in the vector\n        make-items                     (fn [items] (doall (map make-list-item items)))\n        make-group-heading-item        (fn [heading]\n                                         ^{:key (:id heading)}\n                                         [group-heading-item\n                                          :heading               heading\n                                          :disabled?             disabled?\n                                          :click-callback        click-callback\n                                          :double-click-callback double-click-callback\n                                          :selected-item-id      @*current-item-id])\n        make-heading-then-items        (fn [heading items]\n                                         (cons (make-group-heading-item heading) (make-items items)))]\n    [box/box\n     :src   src\n     :size  \"1\"\n     :class (if disabled? \"bm-multi-select-list-disabled\" \"bm-multi-select-list\")\n     :style {:background-color \"#fafafa\"\n             :border           \"1px solid #ccc\"\n             :border-radius    \"4px\"}\n     :child [:ul.chosen-results\n             {:style {:max-height \"none\"}} ;; Override the 240px in the class\n             (if (-> items count pos?)\n               (if has-group-names?\n                 (apply concat (doall (map make-heading-then-items group-names group-item-lists)))\n                 (make-items (first group-item-lists)))\n               (if (string/blank? filter-choices-text)\n                 \"\"\n                 [:li.no-results (str \"No results match \\\"\" filter-choices-text \"\\\"\")]))]]))\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: multi-select\n;;--------------------------------------------------------------------------------------------------\n\n;; Set of candidates (sorted externally)\n;; a set of ids\n\n;; LHS: set of candidates with selected id set removed, sorted/grouped by fn\n;; RHS: set of candidates selecting on id, sorted/grouped by fn\n\n(def multi-select-parts-desc\n  (when include-args-desc?\n    [{:type :legacy                    :level 0 :class \"rc-multi-select\"                           :impl \"[multi-select]\"}\n     {:name :container                 :level 1 :class \"rc-multi-select-container\"                 :impl \"[h-box]\"}\n     {:name :left                      :level 2 :class \"rc-multi-select-left\"                      :impl \"[v-box]\"}\n     {:name :left-label-container      :level 3 :class \"rc-multi-select-left-label-container\"      :impl \"[h-box]\"}\n     {:name :left-label                :level 4 :class \"rc-multi-select-left-label\"                :impl \"[:span]\"}\n     {:name :left-label-item-count     :level 4 :class \"rc-multi-select-left-label-item-count\"     :impl \"[:span]\"}\n     {:name :left-list-box             :level 3 :class \"rc-multi-select-left-list-box\"             :impl \"[list-box]\"}\n     {:name :filter-text-box           :level 3 :class \"rc-multi-select-filter-text-box\"           :impl \"[h-box]\"}\n     {:name :filter-input-text         :level 4 :class \"rc-multi-select-filter-input-text\"         :impl \"[input-text]\"}\n     {:name :filter-reset-button       :level 4 :class \"rc-multi-select-filter-reset-button\"       :impl \"[close-button]\"}\n     {:name :left-filter-result-count  :level 3 :class \"rc-multi-select-left-filter-result-count\"  :impl \"[label]\"}\n     {:name :middle-container          :level 2 :class \"rc-multi-select-middle-container\"          :impl \"[v-box]\"}\n     {:name :middle-top-spacer         :level 3 :class \"rc-multi-select-middle-top-spacer\"         :impl \"[box]\"}\n     {:name :middle                    :level 3 :class \"rc-multi-select-middle\"                    :impl \"[v-box]\"}\n     {:name :include-all-button        :level 4 :class \"rc-multi-select-include-all-button\"        :impl \"[button]\"}\n     {:name :include-selected-button   :level 4 :class \"rc-multi-select-include-selected-button\"   :impl \"[button]\"}\n     {:name :exclude-selected-button   :level 4 :class \"rc-multi-select-exclude-selected-button\"   :impl \"[button]\"}\n     {:name :exclude-all-button        :level 4 :class \"rc-multi-select-exclude-all-button\"        :impl \"[button]\"}\n     {:name :middle-bottom-spacer      :level 3 :class \"rc-multi-select-middle-bottom-spacer\"      :impl \"[box]\"}\n     {:name :right                     :level 2 :class \"rc-multi-select-right\"                     :impl \"[v-box]\"}\n     {:name :warning-message           :level 3 :class \"rc-multi-select-warning-message\"           :impl \"[label]\"}\n     {:name :right-label-container     :level 3 :class \"rc-multi-select-right-label-container\"     :impl \"[h-box]\"}\n     {:name :right-label               :level 4 :class \"rc-multi-select-right-label\"               :impl \"[:span]\"}\n     {:name :right-label-item-count    :level 4 :class \"rc-multi-select-right-label-item-count\"    :impl \"[:span]\"}\n     {:name :right-list-box            :level 3 :class \"rc-multi-select-right-list-box\"            :impl \"[list-box]\"}\n     {:name :filter-text-box           :level 3 :class \"rc-multi-select-filter-text-box\"           :impl \"[h-box]\"}\n     {:name :filter-input-text         :level 4 :class \"rc-multi-select-filter-input-text\"         :impl \"[input-text]\"}\n     {:name :filter-reset-button       :level 4 :class \"rc-multi-select-filter-reset-button\"       :impl \"[close-button]\"}\n     {:name :right-filter-result-count :level 3 :class \"rc-multi-select-right-filter-result-count\" :impl \"[label]\"}]))\n\n(def multi-select-parts\n  (when include-args-desc?\n    (-> (map :name multi-select-parts-desc) set)))\n\n(def multi-select-args-desc\n  (when include-args-desc?\n    [{:name :choices            :required true                      :type \"vector of maps | r/atom\"  :validate-fn validate/vector-of-maps?    :description [:span \"Each map represents a choice. Values corresponding to id, label and, optionally, a group, are extracted by the functions \" [:code \":id-fn\"] \", \" [:code \":label-fn\"] \" & \" [:code \":group-fn\"]  \". See below.\"]}\n     {:name :id-fn              :required false :default :id        :type \"map -> anything\"          :validate-fn ifn?                        :description [:span \"a function taking one argument (a map) and returns the unique identifier for that map. Called for each element in \" [:code \":choices\"]]}\n     {:name :label-fn           :required false :default :label     :type \"map -> string | hiccup\"   :validate-fn ifn?                        :description [:span \"a function taking one argument (a map) and returns the displayable label for that map. Called for each element in \" [:code \":choices\"]]}\n     {:name :filter-fn          :required false :default \"str\u2218label-fn\" :type \"map -> string\"      :validate-fn ifn?                        :description [:span \"a function taking one argument (a map) and returns the string to filter by. Called for each element in \" [:code \":choices\"] \". (Note: items are also filtered by group-fn)\"]}\n     {:name :group-fn           :required false :default :group     :type \"map -> string | hiccup\"   :validate-fn ifn?                        :description [:span \"a function taking one argument (a map) and returns the group identifier for that map. Called for each element in \" [:code \":choices\"]]}\n     {:name :sort-fn            :required false :default \"compare\"  :type \"map, map -> integer\"      :validate-fn ifn?                        :description [:span \"The comparator function used with \" [:code \"cljs.core/sort-by\"] \" to sort choices.\"]}\n     {:name :model              :required true                      :type \"a set of ids | r/atom\"                                             :description [:span \"a set of the ids for currently selected choices. If nil, see \" [:code \":placeholder\"] \".\"]}\n     {:name :required?          :required false :default false      :type \"boolean | r/atom\"                                                  :description \"when true, at least one item must be selected\"}\n     {:name :max-selected-items :required false :default nil        :type \"integer\"                                                           :description \"maximum number of items that can be selected\"}\n     {:name :left-label         :required false                     :type \"string | hiccup\"          :validate-fn string-or-hiccup?           :description \"label displayed above the left list\"}\n     {:name :right-label        :required false                     :type \"string | hiccup\"          :validate-fn string-or-hiccup?           :description \"label displayed above the right list\"}\n     {:name :on-change          :required true                      :type \"id -> nil\"                :validate-fn fn?                         :description [:span \"a function that will be called when the selection changes. Passed the set of selected ids. See \" [:code \":model\"] \".\"]}\n     {:name :disabled?          :required false :default false      :type \"boolean | r/atom\"                                                  :description \"if true, no user selection is allowed\"}\n     {:name :filter-box?        :required false :default false      :type \"boolean | r/atom\"                                                  :description \"if true, a filter text field is placed at the bottom of the component\"}\n     {:name :regex-filter?      :required false :default false      :type \"boolean | r/atom\"                                                  :description \"if true, the filter text field will support JavaScript regular expressions. If false, just plain text\"}\n     {:name :placeholder        :required false                     :type \"string\"                   :validate-fn string?                     :description \"background text when no selection\"} ;; TODO this is actually broken, does not display background text\n     {:name :width              :required false :default \"100%\"     :type \"string\"                   :validate-fn string?                     :description \"the CSS width. e.g.: \\\"500px\\\" or \\\"20em\\\"\"}\n     {:name :height             :required false                     :type \"string\"                   :validate-fn string?                     :description \"the specific height of the component\"}\n     {:name :max-height         :required false                     :type \"string\"                   :validate-fn string?                     :description \"the maximum height of the component\"}\n     {:name :tab-index          :required false                     :type \"integer | string\"         :validate-fn validate/number-or-string?  :description \"component's tabindex. A value of -1 removes from the tab order\"}\n     {:name :class              :required false                     :type \"string\"                   :validate-fn css-class?                     :description \"CSS class names, space separated\"}\n     {:name :style              :required false                     :type \"CSS style map\"            :validate-fn validate/css-style?         :description \"CSS styles to add or override\"}\n     {:name :attr               :required false                     :type \"HTML attr map\"            :validate-fn validate/html-attr?         :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}\n     {:name :parts              :required false                     :type \"map\"                      :validate-fn (parts? multi-select-parts) :description \"See Parts section below.\"}\n     {:name :src                :required false                     :type \"map\"                      :validate-fn map?                        :description [:span \"Used in dev builds to assist with debugging. Source code coordinates map containing keys\" [:code \":file\"] \"and\" [:code \":line\"]  \". See 'Debugging'.\"]}\n     {:name :debug-as           :required false                     :type \"map\"                      :validate-fn map?                        :description [:span \"Used in dev builds to assist with debugging, when one component is used implement another component, and we want the implementation component to masquerade as the original component in debug output, such as component stacks. A map optionally containing keys\" [:code \":component\"] \"and\" [:code \":args\"] \".\"]}]))\n\n(defn multi-select\n  \"Render a multi-select component which emulates the bootstrap-choosen style. Sample choices object:\n  [{:id \\\"AU\\\" :label \\\"Australia\\\"      :group \\\"Group 1\\\"}\n   {:id \\\"US\\\" :label \\\"United States\\\"  :group \\\"Group 1\\\"}\n   {:id \\\"GB\\\" :label \\\"United Kingdom\\\" :group \\\"Group 1\\\"}\n   {:id \\\"AF\\\" :label \\\"Afghanistan\\\"    :group \\\"Group 2\\\"}]\"\n  [& {:keys [model sort-fn src]\n      :or   {sort-fn identity}\n      :as   args}]\n  \"Internal glossary:\n  LHS - choices    - comes from choices                 - the full list of items to select from\n  RHS - selections - comes from model => internal-model - the selected items from choices collection\n  \"\n  (or\n   (validate-args-macro multi-select-args-desc args)\n   (let [*external-model                    (reagent/atom (deref-or-value model)) ;; Holds the last known external value of model, to detect external model changes\n         *internal-model                    (reagent/atom @*external-model) ;; Create a new atom from the model to be used internally\n         *current-choice-id                 (reagent/atom nil)\n         *current-selection-id              (reagent/atom nil)\n         *choice-group-heading-selected?    (reagent/atom false)\n         *selection-group-heading-selected? (reagent/atom false)\n         *warning-message                   (reagent/atom nil)\n         *filter-choices-text               (reagent/atom \"\")\n         *filter-selections-text            (reagent/atom \"\")\n         button-style                       {:width        \"86px\"\n                                             :height       \"24px\"\n                                             :padding      \"0px 8px 2px 8px\"\n                                             :margin       \"8px 6px\"\n                                             :text-align   \"left\"\n                                             :font-variant \"small-caps\"\n                                             :font-size    11}]\n     (fn multi-select-render\n       [& {:keys [choices model required? max-selected-items left-label right-label on-change disabled? filter-box? regex-filter?\n                  placeholder width height max-height tab-index id-fn label-fn group-fn sort-fn filter-fn class style attr parts src]\n           :or   {id-fn     :id\n                  label-fn  :label\n                  group-fn  :group\n                  sort-fn   compare\n                  required? false}\n           :as   args}]\n       (or\n        (validate-args-macro multi-select-args-desc args)\n        (let [required?              (deref-or-value required?)\n              filter-box?            (deref-or-value filter-box?)\n              regex-filter?          (deref-or-value regex-filter?)\n              min-msg                \"Must have at least one\"\n              max-msg                (str \"Max items allowed is \" max-selected-items)\n              group-fn               (or group-fn ::$$$) ;; TODO: If nil is passed because of a when, this will prevent exceptions...smelly!\n              choices                (set (deref-or-value choices))\n              disabled?              (deref-or-value disabled?)\n              regex-filter?          (deref-or-value regex-filter?)\n              *latest-ext-model      (reagent/atom (deref-or-value model))\n              _                      (when (not= @*external-model @*latest-ext-model) ;; Has model changed externally?\n                                       (reset! *external-model @*latest-ext-model)\n                                       (reset! *internal-model @*latest-ext-model))\n              changeable?            (and on-change (not disabled?))\n              excludable?            (and @*current-selection-id (> (count @*internal-model) (if required? 1 0)))\n              filter-fn              (or filter-fn (comp str label-fn))\n              choices-filter-fn      (if regex-filter?\n                                       (filter-items-regex group-fn filter-fn @*filter-choices-text)\n                                       (filter-items group-fn filter-fn @*filter-choices-text))\n              filtered-choices       (into []\n                                           (->> choices\n                                                (remove #(contains? @*internal-model (id-fn %)))\n                                                (filter choices-filter-fn)\n                                                (sort-by sort-fn)))\n              selections             (into []\n                                           (->> @*internal-model\n                                                (map #(rc.util/item-for-id % choices :id-fn id-fn))\n                                                (sort-by sort-fn)))\n              selections-filter-fn   (if regex-filter?\n                                       (filter-items-regex group-fn filter-fn @*filter-selections-text)\n                                       (filter-items group-fn filter-fn @*filter-selections-text))\n              filtered-selections    (into []\n                                           (->> selections\n                                                (filter selections-filter-fn)\n                                                (sort-by sort-fn)))\n              potential-count        (->> @*internal-model\n                                          (set/difference (set (map id-fn choices)))\n                                          count)\n              chosen-count           (count selections)\n              choice-click           (fn [id group-heading-selected?]\n                                       (reset! *current-choice-id id)\n                                       (reset! *choice-group-heading-selected? group-heading-selected?)\n                                       (reset! *warning-message nil))\n              selection-click        (fn [id group-heading-selected?]\n                                       (reset! *current-selection-id id)\n                                       (reset! *selection-group-heading-selected? group-heading-selected?)\n                                       (reset! *warning-message nil))\n              include-filtered-click #(do (if (and (some? max-selected-items) (> (+ (count @*internal-model) (count filtered-choices)) max-selected-items))\n                                            (reset! *warning-message max-msg)\n                                            (do\n                                              (reset! *internal-model (set (concat @*internal-model (map id-fn filtered-choices))))\n                                              (reset! *warning-message nil)))\n                                          (when (and changeable? (not= @*internal-model @*latest-ext-model))\n                                            (reset! *external-model @*internal-model)\n                                            (on-change @*internal-model))\n                                          (reset! *current-choice-id nil))\n              include-click          #(do (if @*choice-group-heading-selected?\n                                            (let [choices-to-include (->> filtered-choices\n                                                                          (filter (fn [item] (= (first @*current-choice-id) (group-fn item))))\n                                                                          (map id-fn) ;; TODO: Need to realise map output for prod build (dev doesn't need it). Why?\n                                                                          set)]       ;; TODO: See https://github.com/day8/apps-lib/issues/35\n                                              (if (and (some? max-selected-items) (> (+ (count @*internal-model) (count choices-to-include)) max-selected-items))\n                                                (reset! *warning-message max-msg)\n                                                (do\n                                                  (reset! *internal-model (set (concat @*internal-model choices-to-include)))\n                                                  (reset! *choice-group-heading-selected? false))))\n                                            (if (and (some? max-selected-items) (>= (count @*internal-model) max-selected-items))\n                                              (reset! *warning-message max-msg)\n                                              (do\n                                                (swap! *internal-model conj @*current-choice-id)\n                                                (reset! *warning-message nil))))\n                                          (when (and changeable? (not= @*internal-model @*latest-ext-model))\n                                            (reset! *external-model @*internal-model)\n                                            (on-change @*internal-model))\n                                          (reset! *current-choice-id nil))\n              exclude-click          #(do (if excludable?\n                                            (if @*selection-group-heading-selected?\n                                              (let [new-internal-model (->> filtered-selections\n                                                                            (filter (fn [item] (= (first @*current-selection-id) (group-fn item))))\n                                                                            (map id-fn)\n                                                                            set\n                                                                            (set/difference @*internal-model))]\n                                                (if (and required? (empty? new-internal-model))\n                                                  (do\n                                                    (reset! *internal-model (hash-set (first @*internal-model)))\n                                                    (reset! *warning-message min-msg))\n                                                  (do\n                                                    (reset! *internal-model new-internal-model)\n                                                    (reset! *selection-group-heading-selected? false)\n                                                    (reset! *warning-message nil))))\n                                              (do\n                                                (swap! *internal-model disj @*current-selection-id)\n                                                (reset! *warning-message nil)))\n                                            (reset! *warning-message min-msg))\n                                          (when (and changeable? (not= @*internal-model @*latest-ext-model))\n                                            (reset! *external-model @*internal-model)\n                                            (on-change @*internal-model))\n                                          (reset! *current-selection-id nil))\n              exclude-filtered-click #(let [new-internal-model (set/difference @*internal-model (set (map id-fn filtered-selections)))]\n                                        (if (and required? (zero? (count new-internal-model)))\n                                          (do\n                                            (reset! *internal-model (hash-set (first @*internal-model)))\n                                            (reset! *warning-message min-msg))\n                                          (do\n                                            (reset! *internal-model new-internal-model)\n                                            (reset! *warning-message nil)))\n                                        (when (and changeable? (not= @*internal-model @*latest-ext-model))\n                                          (reset! *external-model @*internal-model)\n                                          (on-change @*internal-model))\n                                        (reset! *current-selection-id nil))]\n          [:div\n           (merge\n            {:class (theme/merge-class \"rc-multi-select\"\n                                       \"noselect\"\n                                       \"chosen-container\"\n                                       \"chosen-container-single\"\n                                       class)\n             :style (merge (box/flex-child-style (if width \"0 0 auto\" \"auto\"))\n                           (box/align-style :align-self :start)\n                           {:overflow \"hidden\"\n                            :width    width}\n                           style)}\n            (->attr args)\n            attr) ;; Prevent user text selection\n           [box/h-box\n            :src        (at)\n            :class      (str \"rc-multi-select-container \" (get-in parts [:container :class]))\n            :style      (get-in parts [:container :style])\n            :attr       (get-in parts [:container :attr])\n            :height     height\n            :max-height max-height\n            :gap        \"4px\"\n            :children   [[box/v-box\n                          :src      (at)\n                          :class    (str \"rc-multi-select-left \" (get-in parts [:left :class]))\n                          :style    (get-in parts [:left :style])\n                          :attr     (get-in parts [:left :attr])\n                          :size     \"50%\"\n                          :gap      \"4px\"\n                          :children [(when left-label\n                                       (if (string? left-label)\n                                         [box/h-box\n                                          :src      (at)\n                                          :class    (str \"rc-multi-select-left-label-container \" (get-in parts [:left-label-container :class]))\n                                          :style    (get-in parts [:left-label-container :style])\n                                          :attr     (get-in parts [:left-label-container :attr])\n                                          :justify  :between\n                                          :children [[:span\n                                                      (merge\n                                                       {:class (theme/merge-class \"rc-multi-select-left-label\"\n                                                                                  (get-in parts [:left-label :class]))\n                                                        :style (merge {:font-size   \"small\"\n                                                                       :font-weight \"bold\"}\n                                                                      (get-in parts [:left-label :style]))}\n                                                       (get-in parts [:left-label :attr]))\n                                                      left-label]\n                                                     [:span\n                                                      (merge\n                                                       {:class (theme/merge-class \"rc-multi-select-left-label-item-count\"\n                                                                                  (get-in parts [:left-label-item-count :class]))\n                                                        :style (merge {:font-size \"smaller\"}\n                                                                      (get-in parts [:left-label-item-count :style]))}\n                                                       (get-in parts [:left-label-item-count :attr]))\n                                                      (if (string/blank? @*filter-choices-text)\n                                                        (rc.util/pluralize potential-count \"item\")\n                                                        (str \"showing \" (count filtered-choices) \" of \" potential-count))]]]\n                                         left-label))\n                                     [list-box\n                                      :src                     (at)\n                                      :class                   (str \"rc-multi-select-left-list-box \" (get-in parts [:left-list-box :class]))\n                                      :items                   filtered-choices\n                                      :id-fn                   id-fn\n                                      :label-fn                label-fn\n                                      :group-fn                group-fn\n                                      :disabled?               disabled?\n                                      :*current-item-id        *current-choice-id\n                                      :group-heading-selected? @*choice-group-heading-selected?\n                                      :click-callback          choice-click\n                                      :double-click-callback   include-click\n                                      :filter-choices-text     @*filter-choices-text]\n                                     (when filter-box?\n                                       [:<>\n                                        [box/gap\n                                         :src  (at)\n                                         :size \"4px\"]\n                                        [filter-text-box *filter-choices-text placeholder *warning-message disabled? parts]\n                                        [box/gap\n                                         :src  (at)\n                                         :size \"4px\"]\n                                        (if (string/blank? @*filter-choices-text)\n                                          [text/label\n                                           :src   (at)\n                                           :label (gstring/unescapeEntities \"&nbsp;\")\n                                           :style {:font-size \"smaller\"}]\n                                          [text/label\n                                           :src   (at)\n                                           :class (theme/merge-class \"rc-multi-select-left-filter-result-count\"\n                                                                     (get-in parts [:left-filter-result-count :class]))\n                                           :style (merge {:font-size \"smaller\"}\n                                                         (get-in parts [:left-filter-result-count :style]))\n                                           :attr  (get-in parts [:left-filter-result-count :attr])\n                                           :label [:span \"Found \" (rc.util/pluralize (count filtered-choices) \"match\" \"matches\") \" containing \" [:strong @*filter-choices-text]]])])]]\n\n                         [box/v-box\n                          :src      (at)\n                          :class    (str \"rc-multi-select-middle-container \" (get-in parts [:middle-container :class]))\n                          :style    (get-in parts [:middle-container :style])\n                          :attr     (get-in parts [:middle-container :attr])\n                          :justify  :between\n                          :children [[box/box\n                                      :src   (at)\n                                      :class (theme/merge-class \"rc-multi-select-middle-spacer\"\n                                                                (get-in parts [:middle-spacer :class]))\n                                      :style (get-in parts [:middle-spacer :style])\n                                      :attr  (get-in parts [:middle-spacer :attr])\n                                      :size  \"0 1 22px\" ;; 22 = (+ 18 4) - height of the top components\n                                      :child \"\"]\n                                     [box/v-box\n                                      :src      (at)\n                                      :class    (str \"rc-multi-select-middle \" (get-in parts [:middle :class]))\n                                      :style    (get-in parts [:middle :style])\n                                      :attr     (get-in parts [:middle :attr])\n                                      :justify  :center\n                                      :children [[buttons/button\n                                                  :src       (at)\n                                                  :class     (str \"rc-multi-select-include-all-button \" (get-in parts [:include-all-button :class]))\n                                                  :label     [:span\n                                                              [:i {:class (theme/merge-class \"zmdi\" \"zmdi-hc-fw-rc\" \"zmdi-fast-forward\")}]\n                                                              [:span\n                                                               {:style {:position \"relative\" :top \"-1px\"}}\n                                                               (str \" include \" (if (string/blank? @*filter-choices-text) potential-count (count filtered-choices)))]]\n                                                  :disabled? (or disabled? (zero? (count filtered-choices)))\n                                                  :style     (merge button-style\n                                                                    (get-in parts [:include-all-button :style]))\n                                                  :attr      (get-in parts [:include-all-button :attr])\n                                                  :on-click  include-filtered-click]\n                                                 [buttons/button\n                                                  :src       (at)\n                                                  :class     (str \"rc-multi-select-include-selected-button \" (get-in parts [:include-selected-button :class]))\n                                                  :label     [:span\n                                                              [:i {:class (theme/merge-class \"zmdi\" \"zmdi-hc-fw-rc\" \"zmdi-play\")}]\n                                                              [:span\n                                                               {:style {:position \"relative\" :top \"-1px\"}}\n                                                               (str \" include \" (when @*choice-group-heading-selected?\n                                                                                  (->> filtered-choices ;; TODO: Inefficient\n                                                                                       (filter (fn [item] (= (first @*current-choice-id) (group-fn item))))\n                                                                                       count)))]]\n                                                  :disabled? (or disabled? (not @*current-choice-id))\n                                                  :style     (merge button-style\n                                                                    (get-in parts [:include-selected-button :style]))\n                                                  :attr      (get-in parts [:include-selected-button :attr])\n                                                  :on-click  include-click]\n                                                 [buttons/button\n                                                  :src       (at)\n                                                  :class     (str \"rc-multi-select-exclude-selected-button \" (get-in parts [:exclude-selected-button :class]))\n                                                  :label     [:span\n                                                              [:i {:class (theme/merge-class \"zmdi\" \"zmdi-hc-fw-rc\" \"zmdi-play\" \"zmdi-hc-rotate-180\")}]\n                                                              [:span\n                                                               {:style {:position \"relative\" :top \"-1px\"}}\n                                                               (str \" exclude \" (when @*selection-group-heading-selected?\n                                                                                  (->> filtered-selections ;; TODO: Inefficient\n                                                                                       (filter (fn [item] (= (first @*current-selection-id) (group-fn item))))\n                                                                                       count)))]]\n                                                  :disabled? (or disabled? (not excludable?))\n                                                  :style     (merge button-style\n                                                                    (get-in parts [:exclude-selected-button :style]))\n                                                  :attr      (get-in parts [:exclude-selected-button :attr])\n                                                  :on-click  exclude-click]\n                                                 [buttons/button\n                                                  :src       (at)\n                                                  :class     (str \"rc-multi-select-exclude-all-button \" (get-in parts [:exclude-all-button :class]))\n                                                  :label     [:span\n                                                              [:i {:class (theme/merge-class \"zmdi\" \"zmdi-hc-fw-rc\" \"zmdi-fast-rewind\")}]\n                                                              [:span\n                                                               {:style {:position \"relative\" :top \"-1px\"}}\n                                                               (str \" exclude \" (if (string/blank? @*filter-selections-text) chosen-count (count filtered-selections)))]]\n                                                  :disabled? (or disabled? (zero? (count filtered-selections)) (not (> (count @*internal-model) (if required? 1 0))))\n                                                  :style     (merge button-style\n                                                                    (get-in parts [:exclude-all-button :style]))\n                                                  :attr      (get-in parts [:exclude-all-button :attr])\n                                                  :on-click  exclude-filtered-click]]]\n                                     [box/box\n                                      :src   (at)\n                                      :size  (str \"0 2 \" (if filter-box? \"55px\" \"0px\")) ;; 55 = (+ 4 4 28 4 15) - height of the bottom components\n                                        ;:style {:background-color \"lightblue\"}\n                                      :child \"\"]]]\n                         [box/v-box\n                          :src      (at)\n                          :class    (str \"rc-multi-select-right \" (get-in parts [:right :class]))\n                          :size     \"50%\"\n                          :gap      \"4px\"\n                          :style    (merge {:position \"relative\"}\n                                           (get-in parts [:right :style]))\n                          :attr     (get-in parts [:right :attr])\n                          :children [^{:key (gensym)}\n                                     [text/label\n                                      :src   (at)\n                                      :label @*warning-message\n                                      :class (theme/merge-class \"rc-multi-select-warning-message\"\n                                                                (get-in parts [:warning-message :class]))\n                                      :style (when @*warning-message\n                                               (merge\n                                                {:color            \"white\"\n                                                 :background-color \"green\"\n                                                 :border-radius    \"0px\"\n                                                 :opacity            \"0\"\n                                                 :position           \"absolute\"\n                                                 :right              \"0px\"\n                                                 :z-index            1\n                                                 :height             \"25px\"\n                                                 :padding            \"3px 6px\"\n                                                 :animation-name     \"rc-multi-select-fade-warning-msg\"\n                                                 :animation-duration \"5000ms\"}\n                                                (get-in parts [:warning-message :style])))\n                                      :attr  (get-in parts [:warning-message :attr])]\n                                     (when right-label\n                                       (if (string? right-label)\n                                         [box/h-box\n                                          :src      (at)\n                                          :class    (str \"rc-multi-select-right-label-container \" (get-in parts [:right-label-container :class]))\n                                          :style    (get-in parts [:right-label-container :style])\n                                          :attr     (get-in parts [:right-label-container :attr])\n                                          :justify  :between\n                                          :children [[:span\n                                                      (merge\n                                                       {:class (theme/merge-class \"rc-multi-select-right-label\"\n                                                                                  (get-in parts [:right-label :class]))\n                                                        :style (merge {:font-size \"small\"\n                                                                       :font-weight \"bold\"}\n                                                                      (get-in parts [:right-label :style]))}\n                                                       (get-in parts [:right-label :attr]))\n                                                      right-label]\n                                                     [:span\n                                                      (merge\n                                                       {:class (theme/merge-class \"rc-multi-select-right-label-item-count\"\n                                                                                  (get-in parts [:right-label-item-count :class]))\n                                                        :style (merge {:font-size \"smaller\"}\n                                                                      (get-in parts [:right-label-item-count :style]))}\n                                                       (get-in parts [:right-label-item-count :attr]))\n                                                      (if (string/blank? @*filter-selections-text)\n                                                        (rc.util/pluralize chosen-count \"item\")\n                                                        (str \"showing \" (count filtered-selections) \" of \" chosen-count))]]]\n                                         right-label))\n                                     [list-box\n                                      :src                     (at)\n                                      :class                   (str \"rc-multi-select-right-list-box \" (get-in parts [:right-list-box :class]))\n                                      :style                   (get-in parts [:right-list-box :style])\n                                      :attr                    (get-in parts [:right-list-box :attr])\n                                      :items                   filtered-selections\n                                      :id-fn                   id-fn\n                                      :label-fn                label-fn\n                                      :group-fn                group-fn\n                                      :disabled?               disabled?\n                                      :*current-item-id        *current-selection-id\n                                      :group-heading-selected? @*selection-group-heading-selected?\n                                      :click-callback          selection-click\n                                      :double-click-callback   exclude-click\n                                      :filter-choices-text     @*filter-selections-text]\n                                     (when filter-box?\n                                       [:<>\n                                        [box/gap\n                                         :src  (at)\n                                         :size \"4px\"]\n                                        [filter-text-box *filter-selections-text placeholder *warning-message disabled? parts]\n                                        [box/gap\n                                         :src  (at)\n                                         :size \"4px\"]\n                                        (if (string/blank? @*filter-selections-text)\n                                          [text/label\n                                           :src   (at)\n                                           :label (gstring/unescapeEntities \"&nbsp;\")\n                                           :style {:font-size \"smaller\"}]\n                                          [text/label\n                                           :src   (at)\n                                           :label [:span \"Found \" (rc.util/pluralize (count filtered-selections) \"match\" \"matches\") \" containing \" [:strong @*filter-selections-text]]\n                                           :class (theme/merge-class \"rc-multi-select-right-filter-result-count\"\n                                                                     (get-in parts [:right-filter-result-count :class]))\n                                           :style (merge {:font-size \"smaller\"} (get-in parts [:right-filter-result-count :style]))\n                                           :attr  (get-in parts [:right-filter-result-count :attr])])])]]]]]))))))\n"]}