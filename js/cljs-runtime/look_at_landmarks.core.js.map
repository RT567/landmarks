{"version":3,"sources":["look_at_landmarks/core.cljs"],"mappings":"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","names":["js/look-at-landmarks","js/look-at-landmarks.core","js/look-at-landmarks.core.angle-desk","look-at-landmarks.core/angle-desk","reagent.core.atom","js/look-at-landmarks.core.angle-arrow","look-at-landmarks.core/angle-arrow","js/look-at-landmarks.core.rand-angle","look-at-landmarks.core/rand-angle","look-at-landmarks.core/router","reitit.frontend.router","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","look-at-landmarks.core/path-for","p__60423","vec__60424","cljs.core.nth","seq60421","G__60422","cljs.core/first","cljs.core/next","self__5751__auto__","route","params","reitit.frontend.match_by_name","look-at-landmarks.core/desk-image","re-com.core/h-box","cljs.core/deref","look-at-landmarks.core/arrow-img","look-at-landmarks.core/layered-images","p1__60427#","look-at-landmarks.core/desk-rotator","re-com.core/slider","cljs.core/reset!","p1__60428#","look-at-landmarks.core/arrow-rotator","look-at-landmarks.core/landmarks","js/look-at-landmarks.core.spin-position","look-at-landmarks.core/spin-position","js/look-at-landmarks.core.selected-item","look-at-landmarks.core/selected-item","look-at-landmarks.core/spin-case","item-width","total-items","cljs.core/count","random-spins","cljs.core/rand-int","final-pos","selected-idx","cljs.core/mod","js/setTimeout","look-at-landmarks.core/case-opening-component","G__60429","G__60430","G__60431","G__60432","G__60433","G__60434","re-com.core/v-box","iter__5520__auto__","s__60436","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__60438","cljs.core/chunk-buffer","i__60437","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60435","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","idx","cljs.core.range","landmark","re-com.core/button","look-at-landmarks.core/home-page","re-com.core/title","re-com.core/gap","re-com.core/p","look-at-landmarks.core/items-page","cljs.core.map","item-id","look_at_landmarks.core.path_for","look-at-landmarks.core/item-page","routing-data","reagent.session/get","item","cljs.core.get_in","look-at-landmarks.core/about-page","look-at-landmarks.core/page-for","G__60439","cljs.core/Keyword","js/Error","look-at-landmarks.core/current-page","page","look-at-landmarks.core/mount-root","reagent.dom.render","js/document","look-at-landmarks.core/init!","clerk.core/initialize!","accountant.core/configure-navigation!","path","match","reitit.frontend.match_by_path","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","reagent.session/put!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!","look-at-landmarks.core/reload!","cljs.core/chunk-first"],"sourcesContent":["(ns look-at-landmarks.core\r\n  (:require\r\n   [reagent.core :as reagent :refer [atom]]\r\n   [reagent.dom :as rdom]\r\n   [reagent.session :as session]\r\n   [reitit.frontend :as reitit]\r\n   [clerk.core :as clerk]\r\n   [accountant.core :as accountant]\r\n   [re-com.core :as re-com]))\r\n\r\n(defonce angle-desk (reagent.core/atom 0))\r\n(defonce angle-arrow (reagent.core/atom 0))\r\n(defonce rand-angle (reagent.core/atom 0))\r\n\r\n;; -------------------------\r\n;; Routes\r\n\r\n(def router\r\n  (reitit/router\r\n   [[\"/\" :index]\r\n    [\"/items\"\r\n     [\"\" :items]\r\n     [\"/:item-id\" :item]]\r\n    [\"/about\" :about]]))\r\n\r\n(defn path-for [route & [params]]\r\n  (if params\r\n    (:path (reitit/match-by-name router route params))\r\n    (:path (reitit/match-by-name router route))))\r\n\r\n;; -------------------------\r\n;; Page components\r\n\r\n(defn desk-image [] \r\n  [re-com/h-box\r\n   :size \"auto\"\r\n   :children [[:img {:src \"desk.png\"\r\n                     :height \"450px\"\r\n                     :style {:transform (str \"rotate(\" @angle-desk \"deg)\")}}]]])\r\n\r\n(defn arrow-img []\r\n  [re-com/h-box\r\n   :size \"auto\"\r\n   :children [[:img {:src \"arrow.png\"\r\n                     :height \"450px\"\r\n                     :style {:transform (str \"rotate(\" @angle-arrow \"deg)\")}}]]])\r\n\r\n(defn layered-images []\r\n  [:div {:style {:position \"relative\"\r\n                 :width \"450px\"\r\n                 :height \"450px\"}}\r\n   [:img {:src \"desk.png\"\r\n          :height \"450px\"\r\n          :style {:position \"absolute\"\r\n                  :top 0\r\n                  :left 0\r\n                  :transform (str \"rotate(\" @angle-desk \"deg)\")}}]\r\n   [:img {:src \"arrow.png\"\r\n          :height \"450px\"\r\n          :style {:position \"absolute\"\r\n                  :top 0\r\n                  :left 0\r\n                  :transform (str \"rotate(\" @angle-arrow \"deg)\")}}]\r\n   [:img {:src \"look.png\"\r\n          :height \"450px\"\r\n          :style {:position \"absolute\"\r\n                  :top 0\r\n                  :left 0\r\n                  :transform (str \"rotate(\" @rand-angle \"deg)\")}}]\r\n   ])\r\n\r\n(defn desk-rotator []\r\n  [re-com/slider\r\n   :model @angle-desk\r\n   :on-change #(reset! angle-desk %)\r\n   :min 0\r\n   :max 360\r\n   :step 1\r\n   :width \"200px\"])\r\n\r\n(defn arrow-rotator []\r\n  [re-com/slider\r\n   :model @angle-arrow\r\n   :on-change #(reset! angle-arrow %)\r\n   :min 0\r\n   :max 360\r\n   :step 1\r\n   :width \"200px\"])\r\n\r\n\r\n(def landmarks [\"Eiffel Tower\" \"Great Wall of China\" \"Statue of Liberty\" \"Taj Mahal\" \"Colosseum\"\r\n                \"Sydney Opera House\" \"Pyramids of Giza\" \"Big Ben\" \"Christ the Redeemer\"\r\n                \"Machu Picchu\" \"Golden Gate Bridge\" \"Mount Fuji\" \"Stonehenge\" \"Burj Khalifa\"\r\n                \"Leaning Tower of Pisa\" \"Empire State Building\" \"Niagara Falls\" \"The Louvre\"\r\n                \"Petra\" \"Angkor Wat\" \"Mount Everest\" \"Santorini\" \"Grand Canyon\"\r\n                \"Acropolis of Athens\" \"Neuschwanstein Castle\"])\r\n\r\n(defonce spin-position (reagent.core/atom 0))\r\n(defonce selected-item (reagent.core/atom nil))\r\n\r\n(defn spin-case []\r\n  \r\n  (let [item-width 150\r\n        total-items (count landmarks)\r\n        random-spins (+ (* total-items 5) (rand-int (+ 100 total-items)))\r\n        final-pos (* random-spins item-width)\r\n        selected-idx (mod (+ random-spins 2) total-items)]\r\n    (reset! spin-position 0)\r\n    (reset! selected-item nil)\r\n    (reset! rand-angle (rand-int 360))\r\n    (js/setTimeout #(reset! spin-position final-pos) 100)\r\n    (js/setTimeout #(reset! selected-item (nth landmarks selected-idx)) 7100)))\r\n\r\n(defn case-opening-component []\r\n  (re-com/v-box\r\n   :justify :center\r\n   :align :center\r\n   :children [[:div {:style {:width \"600px\"\r\n                             :overflow \"hidden\"\r\n                             :margin \"40px auto\"\r\n                             :position \"relative\"\r\n                             :border \"3px solid #ddd\"}}\r\n\r\n               [:div {:style {:display \"flex\"\r\n                              :transform (str \"translateX(-\" @spin-position \"px)\")\r\n                              :transition \"transform 7s cubic-bezier(0.1, 0.7, 0.2, 1)\"}}\r\n                (for [idx (range 0 (* 10 (count landmarks)))]\r\n                  (let [landmark (nth landmarks (mod idx (count landmarks)))]\r\n                    ^{:key idx}\r\n                    [:div {:style {:width \"150px\"\r\n                                   :flex-shrink 0\r\n                                   :border-right \"1px solid #ddd\"\r\n                                   :display \"flex\"\r\n                                   :align-items \"center\"\r\n                                   :justify-content \"center\"\r\n                                   :box-sizing \"border-box\"}}\r\n                     landmark]))]\r\n\r\n               [:div {:style {:position \"absolute\"\r\n                              :top 0\r\n                              :left \"62.5%\"\r\n                              :transform \"translateX(-50%)\"\r\n                              :width \"150px\"\r\n                              :height \"100%\"\r\n                              :border \"3px solid red\"\r\n                              :pointer-events \"none\"\r\n                              :box-sizing \"border-box\"}}]]\r\n\r\n              [re-com/button :label \"\ud83c\udfb2 Travel the world!\" :on-click spin-case]\r\n              (when @selected-item\r\n                [:h2 {:style {:text-align \"center\" :margin-top \"20px\"}}\r\n                 (str \"\ud83c\udf89 You got: \" @selected-item \" \ud83c\udf89\")])]))\r\n\r\n\r\n(defn home-page []\r\n  [re-com/v-box\r\n   :children [[re-com/title :label \"adjust person and arrows for your setup (tip: the sun rises in the east), then scroll down to travel the world\"]\r\n              [re-com/gap :size \"100px\" :height \"140px\"]\r\n              [layered-images]\r\n              [re-com/gap :size \"100px\" :height \"120px\"]\r\n              [re-com/p \"person rotator\"]\r\n              [desk-rotator]\r\n\r\n              [re-com/gap :size \"10px\" :height \"40px\"]\r\n              [re-com/p \"arrow rotator\"]\r\n              [arrow-rotator]\r\n              [case-opening-component]\r\n              ]])\r\n\r\n\r\n\r\n(defn items-page []\r\n  (fn []\r\n    [:span.main\r\n     [:h1 \"The items of look-at-landmarks, wowzer\"]\r\n     [:ul (map (fn [item-id]\r\n                 [:li {:name (str \"item-\" item-id) :key (str \"item-\" item-id)}\r\n                  [:a {:href (path-for :item {:item-id item-id})} \"Item: \" item-id]])\r\n               (range 1 60))]]))\r\n\r\n\r\n(defn item-page []\r\n  (fn []\r\n    (let [routing-data (session/get :route)\r\n          item (get-in routing-data [:route-params :item-id])]\r\n      [:span.main\r\n       [:h1 (str \"Item \" item \" of look-at-landmarks\")]\r\n       [:p [:a {:href (path-for :items)} \"Back to the list of items\"]]])))\r\n\r\n\r\n(defn about-page []\r\n  (fn [] [:span.main\r\n          [:h1 \"About look-at-landmarks\"]]))\r\n\r\n\r\n;; -------------------------\r\n;; Translate routes -> page components\r\n\r\n(defn page-for [route]\r\n  (case route\r\n    :index #'home-page\r\n    :about #'about-page\r\n    :items #'items-page\r\n    :item #'item-page))\r\n\r\n\r\n;; -------------------------\r\n;; Page mounting component\r\n\r\n(defn current-page []\r\n  (fn []\r\n    (let [page (:current-page (session/get :route))]\r\n      [:div\r\n       [page]\r\n       ])))\r\n\r\n;; -------------------------\r\n;; Initialize app\r\n\r\n(defn mount-root []\r\n  (rdom/render [current-page] (.getElementById js/document \"app\")))\r\n\r\n(defn init! []\r\n  (clerk/initialize!)\r\n  (accountant/configure-navigation!\r\n   {:nav-handler\r\n    (fn [path]\r\n      (let [match (reitit/match-by-path router path)\r\n            current-page (:name (:data  match))\r\n            route-params (:path-params match)]\r\n        (reagent/after-render clerk/after-render!)\r\n        (session/put! :route {:current-page (page-for current-page)\r\n                              :route-params route-params})\r\n        (clerk/navigate-page! path)\r\n        ))\r\n    :path-exists?\r\n    (fn [path]\r\n      (boolean (reitit/match-by-path router path)))})\r\n  (accountant/dispatch-current!)\r\n  (mount-root))\r\n\r\n(defn ^:dev/after-load reload! []\r\n  (mount-root))\r\n"]}