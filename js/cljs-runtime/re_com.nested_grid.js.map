{"version":3,"sources":["re_com/nested_grid.cljs"],"mappings":"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","names":["re-com.nested-grid/nested-grid-parts-desc","re-com.config/include-args-desc?","re-com.nested-grid/nested-grid-parts","cljs.core.map","cljs.core/set","re-com.nested-grid/nested-grid-args-desc","re-com.validate/part?","cljs.core/ifn?","cljs.core/seq?","cljs.core/boolean?","cljs.core/string?","cljs.core/number?","cljs.core/map?","re-com.nested-grid/descendant?","path-a","path-b","cljs.core/count","cljs.core._EQ_","cljs.core/vec","cljs.core.take","re-com.nested-grid/ancestor?","re-com.nested-grid/spec?","cljs.core.some_fn","cljs.core/vector?","re-com.nested-grid/item?","cljs.core/complement","var_args","G__73488","re-com.nested-grid/header-spec->header-paths","js/Error","p__73494","vec__73496","seq__73497","cljs.core/seq","first__73499","cljs.core/first","cljs.core/next","vec__73500","cljs.core.nth","spec","re_com.nested_grid.header_spec__GT_header_paths","path","acc","left","right","remainder","next-acc","cljs.core.conj","next-path","and__5041__auto__","cljs.core/pop","cljs.core/empty?","re-com.nested-grid/leaf-paths","paths","cljs.core.reduce","p","cljs.core.remove","cljs.core.partial","re-com.nested-grid/spec->headers*","cljs.core/memoize","re-com.nested-grid/end-branch?","fexpr__73542","cljs.core/group-by","cljs.core/vals","cljs.core/last","re-com.nested-grid/start-branch?","fexpr__73550","re-com.nested-grid/header-cross-span","all-paths","cljs.core.filter","re-com.nested-grid/header-main-span","cljs.core.apply","cljs.core/max","p__73559","map__73560","cljs.core/--destructure-map","cljs.core.get","re-com.nested-grid/resize-overlay","drag","mouse-x","on-resize","last-mouse-x","mouse-y","last-mouse-y","cljs.core/reset!","temp__5802__auto__","cljs.core/deref","p1__73557#","p1__73558#","x","y","G__73566","G__73573","cljs.core/Keyword","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","re-com.nested-grid/resize-button","p__73598","map__73599","seq73586","self__5752__auto__","dragging?","reagent.core.atom","hovering?","p__73607","map__73608","dimension","resize-handler","selection?","edge","mouse-down-x","mouse-down-y","G__73618","p1__73579#","p1__73580#","props","G__73625","cljs.core.merge","G__73639","or__5043__auto__","re-com.nested-grid/path->grid-line-name","cljs.core/hash","G__73668","re-com.nested-grid/grid-template","args-arr__5791__auto__","argseq__5792__auto__","seq73664","G__73665","self__5751__auto__","tokens","more-tokens","re_com.nested_grid.grid_template","cljs.core/concat","rf","s","group","clojure.string.join","re-com.util/px","cljs.core.partition_by","p__73722","map__73723","re-com.nested-grid/cell","value","p__73726","map__73727","re-com.nested-grid/cell-wrapper","column-path","row-path","class","style","attr","theme","children","cljs.core.into","re-com.debug/log-on-alt-click","p__73746","map__73747","re-com.nested-grid/header-label","header","re-com.nested-grid/column-header","re-com.util/default-part","re-com.nested-grid/row-header","re-com.nested-grid/level","re-com.nested-grid/quantize","quanta","threshold","p1__73750#","cljs.core.take_while","cljs.core.reductions","cljs.core/+","p__73761","map__73762","p1__73758#","re-com.nested-grid/drag-overlay","re-com.nested-grid/selection-part","_","!ref","reset-ref!","p__73769","map__73770","grid-columns","grid-rows","selection-grid-spec","p1__73767#","cljs.core/not","bounds","origin-x","origin-y","column-begin","column-finish","row-begin","row-finish","grid-spec","x__5131__auto__","y__5132__auto__","x__5128__auto__","y__5129__auto__","re-com.nested-grid/nested-grid","p__73827","map__73829","seq73824","column-width","row-height","column-state","row-state","hover?","scroll-top","scroll-left","column-header-prop","p__73831","vec__73834","k","default","G__73839","cljs.core/meta","header-prop","p__73842","vec__73843","state","G__73847","cljs.core/nil?","max-props","cljs.core.sort_by","cljs.core/key","cljs.core/val","path-group","p1__73785#","resize-column!","p__73853","map__73854","x-distance","p1__73786#","cljs.core.swap_BANG_","cljs.core/update-in","resize-row!","p__73858","map__73860","y-distance","p1__73787#","p__73865","map__73866","passed-in-props","map__73872","map__73874","column-tree","row-tree","cell-value","theme-cells?","pre-theme","show-branch-paths?","max-height","max-width","remove-empty-row-space?","remove-empty-column-space?","column-header-height","row-header-width","show-export-button?","on-export","on-export-cell","on-export-column-header","on-export-row-header","on-export-corner-header","on-init-export-fn","show-zebra-stripes?","show-selection-box?","resize-columns?","resize-rows?","sticky?","sticky-left","sticky-top","debug-parts?","parts","src","cljs.core/constantly","re-com.config/debug?","re-com.config/debug-parts?","export-button","column-header","column-header-wrapper","row-header","row-header-wrapper","corner-header","corner-header-wrapper","cell","cell-wrapper","zebra-stripe","corner-header-grid-container","column-header-grid-container","row-header-grid-container","cell-grid-container","wrapper","outer-grid-container","re-com.theme/comp","column-paths","column-leaf-paths","leaf-column?","row-paths","leaf-row?","p1__73790#","leaf?","G__73904","show?","show-prop","result","showing-column-paths","p1__73792#","showing-row-paths","p1__73800#","showing-column-widths","p1__73801#","showing-row-heights","p1__73802#","max-column-heights","max-row-widths","column-header-total-width","column-header-total-height","row-header-total-height","row-header-total-width","all-sections","cljs.core.comp","p1__73803#","cljs.core.mapcat","section-left?","section-right?","cell-sections","p1__73804#","cell-section-left?","cell-section-right?","column-depth","row-depth","cljs.core/pr-str","default-on-export","p__73936","map__73937","rows","re-com.util/tsv-line","re-com.util/clipboard-write!","cell-grid-columns","width","cell-grid-rows","height","ancestry","cljs.core/reverse","cljs.core/iterate","transpose","cljs.core/apply","cljs.core/mapv","cljs.core/vector","export-corner-headers","cljs.core.mapv","row-index","column-index","G__73958","G__73960","cljs.core.range","export-column-headers","export-path","G__73964","export-row-headers","G__73965","export-cells","map__73969","grid-row-start","grid-row-end","grid-column-start","grid-column-end","G__73970","cljs.core.subvec","G__73971","G__73976","default-export-button","p__73977","map__73978","on-click","re-com.buttons/md-icon-button","export-fn","column-headers","row-headers","corner-headers","cells","header-rows","cljs.core/into","main-rows","cljs.core.concat","G__73981","export-part","re_com.util.part","column-header-cells","iter__5520__auto__","s__73983","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__73985","cljs.core/chunk-buffer","i__73984","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__73982","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","G__73989","G__73998","cljs.core.gensym","G__73993","G__74003","G__73997","G__74006","row-header-cells","s__74010","b__74012","i__74011","iter__74009","G__74018","G__74030","G__74020","G__74036","G__74025","G__74038","G__74027","G__74040","corner-header-cells","s__74045","xs__6360__auto__","iterys__5516__auto__","s__74047","b__74049","i__74048","iter__74046","fs__5517__auto__","iter__74044","G__74052","G__74059","s__74074","s__74076","b__74078","i__74077","iter__74075","iter__74073","G__74084","G__74091","G__74090","G__74093","s__74097","s__74099","b__74101","i__74100","iter__74098","iter__74096","G__74110","G__74124","G__74113","G__74130","G__74118","G__74132","cljs.core.dissoc","zebra-stripes","s__74140","b__74142","i__74141","iter__74139","i","cljs.core/even?","box-selector","overlays","G__74154","fexpr__74153","native-width","re-com.util/scrollbar-tot-thick","native-height","re-com.util/scrollbar-thickness","control-panel","re-com.box/v-box","G__74159","G__74160","G__74163","re-com.debug/->attr","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.nested-grid\n  (:require-macros\n   [re-com.core         :refer [handler-fn]])\n  (:require\n   [clojure.string :as str]\n   [re-com.util :as u :refer [px deref-or-value]]\n   [reagent.core :as r]\n   [re-com.debug :as debug]\n   [re-com.config      :as config :refer [include-args-desc?]]\n   [re-com.validate    :refer [vector-atom? ifn-or-nil? map-atom? parts? part? css-class?]]\n   [re-com.theme :as theme]\n   [re-com.box :as box]\n   re-com.nested-grid.theme\n   [re-com.buttons :as buttons]))\n\n(def nested-grid-parts-desc\n  (when include-args-desc?\n    [{:name :wrapper :level 1 :impl \"[:div]\"}\n     {:name :export-button :level 2 :impl \"[:div]\"}\n     {:name :outer-grid-container :level 2 :impl \"[:div]\"}\n     {:name :corner-header-grid-container :level 3 :impl \"[:div]\"}\n     {:name :corner-header-wrapper :level 4 :impl \"[:div]\"}\n     {:name :corner-header :level 5 :impl \"[:div]\"}\n     {:name :column-header-grid-container :level 3 :impl \"[:div]\"}\n     {:name :column-header-wrapper :level 4 :impl \"[:div]\"}\n     {:name :column-header :level 5 :impl \"[:div]\"}\n     {:name :row-header-grid-container :level 3 :impl \"[:div]\"}\n     {:name :row-header-wrapper :level 4 :impl \"[:div]\"}\n     {:name :row-header :level 5 :impl \"[:div]\"}\n     {:name :cell-grid-container :level 3 :impl \"[:div]\"}\n     {:name :cell-wrapper :level 4 :impl \"[:div]\"}\n     {:name :cell :level 5 :impl \"[:div]\"}\n     {:name :zebra-stripe :level 5 :impl \"[:div]\"}]))\n\n(def nested-grid-parts\n  (when include-args-desc?\n    (-> (map :name nested-grid-parts-desc) set)))\n\n(def nested-grid-args-desc\n  (when include-args-desc?\n    [{:name :cell\n      :default \"constantly nil\"\n      :type \"part\"\n      :validate-fn part?\n      :description\n      [:span \"String, hiccup or function. When a function, acceps keyword args \"\n       [:code \":column-path\"] \" and \" [:code \":row-path\"]\n       \". Returns either a string or hiccup, which will appear within a single grid cell.\"]}\n     {:name :cell-value\n      :type \"function\"\n      :required false\n      :validate-fn ifn?\n      :description\n      [:span \"Before calling \" [:code \":cell\"] \", \" [:code \"nested-grid\"] \" evaluates \"\n       [:code \":cell-value\"] \"with the same arguments. It then passes the return value to \"\n       [:code \":cell\"] \", via a \" [:code \":value\"] \" prop.\"]}\n     {:name :column-tree\n      :default \"[]\"\n      :type \"vector or seq of column-specs or column-trees\"\n      :validate-fn seq?\n      :description\n      [:span \"Describes a nested arrangement of \" [:code \":column-spec\"] \"s. \"\n       \"A spec's path derives from its depth within the hierarchy of vectors or seqs. \"\n       \" When a non-vector A precedes a vector B, then the items of B are children of A.\"\n       \" When a non-vector C follows B, then C is a sibling of A.\"\n       \" This nesting can be arbitrarily deep.\"]}\n     {:name :row-tree\n      :default \"[]\"\n      :type \"vector or seq of row-specs or row-trees\"\n      :validate-fn seq?\n      :description\n      [:span \"Describes a nested arrangement of \" [:code \":row-spec\"] \"s. \"\n       \"A spec's path derives from its depth within the hierarchy of vectors or seqs. \"\n       \" When a non-vector A precedes a vector B, then the items of B are children of A.\"\n       \" When a non-vector C follows B, then C is a sibling of A.\"\n       \" This nesting can be arbitrarily deep.\"]}\n     {:name :column-header\n      :type \"part\"\n      :validate-fn part?\n      :description\n      [:span \"A string, hiccup, or function of \" [:code \"{:keys [column-path]}\"] \".\"\n       \" By default, returns the \" [:code \":label\"] \", \" [:code \":id\"]\n       \", or else a string of the entire value of the last item in \"\n       [:code \":column-path\"] \".\"]}\n     {:name :row-header\n      :type \"part\"\n      :validate-fn part?\n      :description\n      [:span \"A string, hiccup, or function of \" [:code \"{:keys [row-path]}\"] \".\"\n       \" By default, returns the \" [:code \":label\"] \", \" [:code \":id\"]\n       \", or else a string of the entire value of the last item in \"\n       [:code \":row-path\"] \".\"]}\n     {:name :corner-header\n      :type \"part\"\n      :validate-fn part?\n      :description\n      [:span \"A string, hiccup, or function of \" [:code \"{:keys [row-index column-index]}\"] \".\"\n       \" Both row-index and column-index are integers. By default, returns \" [:code \"nil\"] \".\"]}\n     {:name :cell-wrapper\n      :type \"part\"\n      :validate-fn part?\n      :description\n      [:span \"A wrapper div, responsible for positioning one \" [:code \":cell\"]\n       \" within the css grid.\"]}\n     {:name :column-header-wrapper\n      :type \"part\"\n      :validate-fn part?\n      :description\n      [:span \"A wrapper div, responsible for positioning one \" [:code \":column-header\"]\n       \" within the css grid.\"]}\n     {:name :row-header-wrapper\n      :type \"part\"\n      :validate-fn part?\n      :description\n      [:span \"A wrapper div, responsible for positioning one \" [:code \":row-header\"]\n       \" within the css grid.\"]}\n     {:name :corner-header-wrapper\n      :type \"part\"\n      :validate-fn part?\n      :description\n      [:span \"A wrapper responsible for positioning one \" [:code \":corner-header\"]\n       \" within the css grid.\"]}\n     {:name :export-button\n      :type \"part\"\n      :validate-fn part?\n      :description [:span \"Receives an \" [:code \":on-click\"]\n                    \" prop, a function which calls \" [:code \":on-export\"] \".\"]}\n     {:name :show-branch-paths?\n      :type \"boolean\"\n      :default \"false\"\n      :validate-fn boolean?\n      :description\n      [:span \"When \" [:code \"true\"] \", displays cells and headers for all \"\n       [:code \":column-paths\"] \" and \" [:code \":row-paths\"] \", not just the leaf paths.\"]}\n     {:name :theme-cells?\n      :type \"boolean\"\n      :default \"true\"\n      :validate-fn boolean?\n      :description\n      [:span \"When \" [:code \"false\"] \", uses the \" [:code \":cell\"] \" function directly, \"\n       \" not wrapping or themeing it. That means your theme fn will not get called with a \"\n       [:code \"part\"] \" value of \" [:code \"::cell\"] \" or \" [:code \"::cell-wrapper\"] \". \"\n       \"the \" [:code \"::cell-wrapper\"] \" part will not be used at all. Your \"\n       [:code \":cell\"] \" will be passed a \" [:code \":style\"] \" prop, and \"\n       \"it must return a div with that style applied (necessary for grid positioning). \"\n       \"This improves performance for grids with a high number of cells.\"]}\n     {:name :resize-columns?\n      :type \"boolean\"\n      :default \"true\"\n      :validate-fn boolean?\n      :description\n      [:span \"When \" [:code \"true\"] \", display a draggable resize button on column-header grid lines.\"]}\n     {:name :resize-rows?\n      :type \"boolean\"\n      :default \"false\"\n      :validate-fn boolean?\n      :description\n      [:span \"When \" [:code \"true\"] \", display a draggable resize button on row-header grid lines.\"]}\n     {:default true\n      :description\n      \"If true removes whitespace between the last row and the horizontal scrollbar. Useful for tables without many rows where otherwise\n there would be a big gap between the last row and the horizontal scrollbar at the bottom of the available space.\"\n      :name :remove-empty-row-space?\n      :required false\n      :type \"boolean\"}\n     {:default true\n      :description\n      \"If true removes whitespace between the last column and the vertical scrollbar. Useful for tables without many columns where otherwise\n there would be a big gap between the last column and the vertical scrollbar at the right of the available space.\"\n      :name :remove-empty-column-space?\n      :required false\n      :type \"boolean\"}\n     {:name :max-height\n      :required false\n      :type \"string\"\n      :validate-fn string?\n      :description [:span \"standard CSS max-height setting of the entire grid. \"\n                    \"Literally constrains the grid to the given width so that \"\n                    \"if the grid is taller than this it will add scrollbars. \"\n                    \"Ignored if value is larger than the combined width of \"\n                    \"all the rendered grid rows.\"]}\n     {:name :max-width\n      :required false\n      :type \"string\"\n      :validate-fn string?\n      :description\n      [:span \"standard CSS max-width setting of the entire grid. \"\n       \"Literally constrains the grid to the given width so that \"\n       \"if the grid is wider than this it will add scrollbars.\"\n       \" Ignored if value is larger than the combined width of all the rendered grid columns.\"]}\n     {:name :column-header-height\n      :default 30\n      :type \"number\"\n      :validate-fn number?\n      :description\n      [:span \"The default height that a column-header will use. \"\n       \"Can be overridden by a \" [:code \":height\"] \"key in the \"\n       [:code \":column-spec\"] \", or by component-local state.\"]}\n     {:name :row-height\n      :default 25\n      :type \"number\"\n      :validate-fn number?\n      :description\n      [:span \"The default height that a row will use. \"\n       \"Can be overridden by a \" [:code \":height\"] \"key in the \"\n       [:code \":row-spec\"] \", or by component-local state.\"]}\n     {:name :column-width\n      :default 30\n      :type \"number\"\n      :validate-fn number?\n      :description\n      [:span \"The default width that a column of grid cells will use. \"\n       \"Can be overridden by a \" [:code \":height\"] \"key in the \"\n       [:code \":column-spec\"] \", or by component-local state.\"]}\n     {:name :row-header-width\n      :default 30\n      :type \"number\"\n      :validate-fn number?\n      :description\n      [:span \"The default width that a row-header will use. \"\n       \"Can be overridden by a \" [:code \":width\"] \"key in the \"\n       [:code \":row-spec\"] \", or by component-local state.\"]}\n     {:name :row-width\n      :default 30\n      :type \"number\"\n      :validate-fn number?\n      :description\n      [:span \"The default width that a row of grid cells will use. \"\n       \"Can be overridden by a \" [:code \":width\"]\n       \"key in the \" [:code \":row-spec\"] \", or by component-local state.\"]}\n     {:name :sticky?\n      :default false\n      :type \"boolean\"\n      :description\n      [:span \"When true, disables scroll bars on the wrapper. \"\n       \"In that case: \"\n       [:ul\n        [:li \"Header cells \\\"stick\\\" to the first ancestor which is a scroll container\"]\n        [:li [:code \":max-width\"] \" and \" [:code \":max-height\"] \" have no effect\"]\n        [:li [:code \":sticky-top\"] \" and \" [:code \":sticky-left\"] \" take effect\"]]\n       \"See css sticky positioning for details. \"]}\n     {:name :sticky-top\n      :default false\n      :type \"number\"\n      :validate-fn number?\n      :description\n      [:span \"When \" [:code \":sticky?\"] \" is true, \"\n       \"header cells (and the top buttons) stick to an ancestor scroll container. \"\n       [:code \":sticky-top\"] \" Adds a pixel offset, making them stick higher or lower on the page.\"\n       \" Useful to prevent overlap, for instance, if the page header is sticky, absolute or fixed.\"]}\n     {:name :sticky-left\n      :default false\n      :type \"number\"\n      :validate-fn number?\n      :description\n      [:span \"When \" [:code \":sticky?\"] \" is true, \"\n       \"header cells (and the top buttons) stick to an ancestor scroll container. \"\n       [:code \":sticky-left\"] \" Adds a pixel offset, making them stick further left or right on the page.\"\n       \" Useful to prevent overlap, for instance, if the page sidebar is sticky, absolute or fixed.\"]}\n     {:name :show-export-button?\n      :required false\n      :default false\n      :type \"boolean\"\n      :description\n      [:span \"When non-nil, adds a hiccup of \" [:code \":export-button-render\"]\n       \" to the component tree.\"]}\n     {:name :on-export\n      :required false\n      :type \"function\"\n      :validate-fn ifn?\n      :description\n      [:span \"Called whenever the export button is clicked. \"\n       \"Can expect to be passed several keyword arguments. \"\n       \"Each argument is a nested vector of cell values. \"\n       [:ul\n        [:li [:strong [:code \":rows\"]] \": \"\n         \"Everything.\"]\n        [:li [:strong [:code \":header-rows\"]] \": \"\n         \"Everything above the cells. Each row includes spacers for the top-left corner, \"\n         \"followed by column headers.\"]\n        [:li [:strong [:code \":main-rows\"]] \": \"\n         \"Includes first row of main cells and everything beneath it. \"\n         \"Each row includes the row-headers, followed by the main cells.\"]\n        [:li [:strong [:code \":cells\"]] \": \"\n         \"Just the cells, without any headers.\"]\n        [:li [:strong [:code \":spacers\"]] \": \"\n         \"Just the spacers in the top-left corner.\"]\n        [:li [:strong [:code \":row-headers\"]] \": \"\n         \"Just the row headers, no cells.\"]\n        [:li [:strong [:code \":column-headers\"]] \": \"\n         \"Just the column headers, no cells.\"]\n        [:li [:strong [:code \":default\"]] \": \"\n         [:code \"nested-grid\"] \"'s default function for \" [:code \":on-export\"] \". \"\n         \"This joins the rows into a single string of tab-separated values, then \"\n         \"writes that string to the clipboard.\"]]]}\n     {:name :on-init-export-fn\n      :type \"function\"\n      :validate-fn ifn?\n      :description \"Called whenever nested-grid's internal export function changes.\"}\n     {:name :on-export-cell\n      :required false\n      :type \"{:keys [row-path column-path]} -> string\"\n      :validate-fn ifn?\n      :description\n      [:span \"Similar to \" [:code \":cell\"] \", but its return value should be serializable. \"\n       \"Returning a hiccup or render-fn is probably a bad idea. \"\n       \"After the export button is clicked, \" [:code \"nested-grid\"] \" maps \"\n       [:code \":on-export-cell\"] \"over any cells marked for export, passing the \"\n       \"results to \" [:code \":on-export\"] \".\"]}\n     {:name :on-export-row-header\n      :required false\n      :type \"{:keys [row-path]} -> string\"\n      :validate-fn ifn?\n      :description\n      [:span \"Similar to \" [:code \":row-header\"]\n       \", but it should return a string value only.\"\n       \" After the export button is clicked, \" [:code \"nested-grid\"] \" maps \"\n       [:code \":on-export-row-header\"] \"over any row headers marked for export, passing the \"\n       \"results to \" [:code \":on-export\"] \" via the \" [:code \":main-rows\"] \" prop.\"]}\n     {:name :on-export-column-header\n      :required false\n      :type \"{:keys [column-path]} -> string\"\n      :validate-fn ifn?\n      :description\n      [:span \"Similar to \" [:code \":column-header\"]\n       \", but it should return a string value only.\"\n       \" After the export button is clicked, \" [:code \"nested-grid\"] \" maps \"\n       [:code \":on-export-column-header\"] \"over any column-headers marked for export, passing the \"\n       \"results to \" [:code \":on-export\"] \" via the \" [:code \":header-rows\"] \" prop.\"]}\n     {:name :on-export-corner-header\n      :type \"{:keys [row-index column-index]} -> string\"\n      :validate-fn ifn?\n      :description\n      [:span \"Similar to \" [:code \":corner-header\"]\n       \", but it should return a string value only.\"\n       \" After the export button is clicked, \" [:code \"nested-grid\"] \" maps \"\n       [:code \":on-export-column-header\"] \" over all the top-left corner cells, passing the \"\n       \"results to \" [:code \":on-export\"] \" via the \" [:code \":header-rows\"] \" prop.\"]}\n     {:name :show-selection-box?\n      :default false\n      :type \"boolean\"\n      :validate-fn boolean?\n      :description\n      [:span \"when true, dragging the mouse causes an excel-style \"\n       \"selection box to appear. When there is a selection box, any export behavior \"\n       \"takes the bounds of that box into account. For instance, if 2 cells are \"\n       \"selected, then only 2 cells are exported.\"]}\n     {:description\n      [:span \"Used in dev builds to assist with debugging. Source code coordinates map containing keys\"\n       [:code \":file\"] \"and\" [:code \":line\"] \". See 'Debugging'.\"]\n      :name :src\n      :required false\n      :type \"map\"\n      :validate-fn map?}]))\n\n(defn descendant? [path-a path-b]\n  (and (not (>= (count path-a) (count path-b)))\n       (= path-a (vec (take (count path-a) path-b)))))\n\n(defn ancestor? [path-a path-b]\n  (descendant? path-b path-a))\n\n(def spec? (some-fn vector? seq?))\n(def item? (complement spec?))\n\n(defn header-spec->header-paths\n  ([spec]\n   (header-spec->header-paths [] [] spec))\n  ([path acc [left & [right :as remainder]]]\n   (let [next-acc  (cond (item? left) (conj acc (conj path left))\n                         (spec? left) (header-spec->header-paths path acc left))\n         next-path (cond (and (item? left) (spec? right))            (conj path left)\n                         (and (spec? left) (item? right) (seq path)) (pop path)\n                         :else                                       path)]\n     (if (empty? remainder)\n       next-acc\n       (recur next-path next-acc remainder)))))\n\n(defn leaf-paths [paths]\n  (reduce (fn [paths p] (remove (partial ancestor? p) paths)) paths paths))\n\n(def spec->headers* (memoize header-spec->header-paths))\n\n(assert (= (header-spec->header-paths [:a :b :c])\n           [[:a] [:b] [:c]]))\n\n(assert (= (header-spec->header-paths [:a [:b :c]])\n           [[:a] [:a :b] [:a :c]]))\n\n(assert (= (header-spec->header-paths [:a :b [:c]])\n           [[:a] [:b] [:b :c]]))\n\n(assert (= (header-spec->header-paths [[:a [:b :c]]])\n           [[:a] [:a :b] [:a :c]]))\n\n(assert (= (header-spec->header-paths [[:x [:b :c]]\n                                       [:y [:b :c]]])\n           [[:x] [:x :b] [:x :c] [:y] [:y :b] [:y :c]]))\n\n(defn end-branch? [path paths]\n  ((->> paths\n        (group-by count)\n        vals\n        (map last)\n        set)\n   path))\n\n(defn start-branch? [path paths]\n  ((->> paths\n        (group-by count)\n        vals\n        (map first)\n        set)\n   path))\n\n(defn header-cross-span [path all-paths]\n  (->> all-paths\n       (filter (partial descendant? path))\n       count\n       inc))\n\n(defn header-main-span [path all-paths]\n  (->> all-paths (map count) (apply max) (+ (- (count path))) inc))\n\n(defn resize-overlay [{:keys [drag mouse-x on-resize last-mouse-x mouse-y last-mouse-y]}]\n  [:div {:on-mouse-up   #(do (reset! drag false)\n                             #_(reset! hovering? false))\n         :on-mouse-move (if-let [on-resize @on-resize]\n                          #(do (.preventDefault %)\n                               (let [x (.-clientX %)\n                                     y (.-clientY %)]\n                                 (reset! mouse-x x)\n                                 (reset! mouse-y y)\n                                 (on-resize {:x-distance (- x @last-mouse-x)\n                                             :y-distance (- y @last-mouse-y)})\n                                 (reset! last-mouse-x x)\n                                 (reset! last-mouse-y y)))\n                          #(do (.preventDefault %)\n                               (let [x (.-clientX %)\n                                     y (.-clientY %)]\n                                 (reset! mouse-x x)\n                                 (reset! last-mouse-x x)\n                                 (reset! last-mouse-y y))))\n         :style         {:position             \"fixed\"\n                         :z-index              3\n                         :width                \"100%\"\n                         :height               \"100%\"\n                         :top                  0\n                         :left                 0\n                         :font-size            100\n                         :cursor               (case @drag\n                                                 ::column \"col-resize\"\n                                                 ::row    \"row-resize\"\n                                                 nil)\n                         #_#_:background-color \"rgba(0,0,0,0.4\"}}])\n\n(defn resize-button [& {:keys [drag]}]\n  (let [dragging? (r/atom false)\n        hovering? (r/atom nil)]\n    (fn [& {:keys [dimension on-resize path resize-handler selection?\n                   edge\n                   mouse-down-x last-mouse-x mouse-x\n                   mouse-down-y last-mouse-y mouse-y]}]\n      [:div {:on-mouse-enter #(reset! hovering? true)\n             :on-mouse-leave #(reset! hovering? false)\n             :on-mouse-down  (case dimension\n                               :column\n                               #(do\n                                  (.preventDefault %)\n                                  (reset! selection? nil)\n                                  (reset! resize-handler\n                                          (fn [props]\n                                            (on-resize (merge {:path path} props))))\n                                  (reset! drag    ::column)\n                                  (reset! mouse-down-x (.-clientX %))\n                                  (reset! mouse-x      (.-clientX %))\n                                  (reset! last-mouse-x (.-clientX %)))\n                               :row\n                               #(do\n                                  (.preventDefault %)\n                                  (reset! selection? nil)\n                                  (reset! resize-handler\n                                          (fn [props]\n                                            (on-resize (merge {:path path} props))))\n                                  (reset! drag    ::row)\n                                  (reset! mouse-down-y (.-clientY %))\n                                  (reset! mouse-y      (.-clientY %))\n                                  (reset! last-mouse-y (.-clientY %))))\n\n             :style (merge {:position         \"absolute\"\n                            :opacity          (if (or @hovering? @dragging?) 1 0)\n                            :z-index          9999999\n                            :background-color \"rgba(0,0,0,0.1)\"}\n                           (when (= :column dimension)\n                             {:top    0\n                              :cursor \"col-resize\"\n                              :height \"100%\"\n                              :width  (if (get edge :right)\n                                        \"4px\"\n                                        \"9px\")\n                              :right  (if (get edge :right)\n                                        0\n                                        \"-4px\")})\n                           (when (= :row dimension)\n                             {:left   0\n                              :cursor \"row-resize\"\n                              :height (if (get edge :bottom)\n                                        \"4px\"\n                                        \"9px\")\n                              :width  \"100%\"\n                              :bottom (if (get edge :bottom)\n                                        0\n                                        \"-4px\")}))}])))\n\n(defn path->grid-line-name [path]\n  (str \"line__\" (hash path) \"-start\"))\n\n(defn grid-template\n  ([tokens & more-tokens]\n   (grid-template (apply concat tokens more-tokens)))\n  ([tokens]\n   (let [rf (fn [s group]\n              (str s \" \"\n                   (cond (number? (first group))\n                         (str/join \" \" (map px group))\n                         (string? (first group))\n                         (str/join \" \" group)\n                         :else\n                         (str \"[\" (str/join \" \" (map path->grid-line-name group)) \"]\"))))]\n     (str\n      (->> tokens\n           (partition-by (some-fn number? string?))\n           (reduce rf \"\"))\n      \" [end]\"))))\n\n(defn cell [{:keys [value]}]\n  (str value))\n\n(defn cell-wrapper [{:keys [column-path row-path class style attr theme children] :as props}]\n  (into\n   [:div\n    (-> {:on-click (debug/log-on-alt-click props)\n         :class class\n         :style (merge {:grid-column (path->grid-line-name column-path)\n                        :grid-row    (path->grid-line-name row-path)}\n                       style)}\n        (merge attr))]\n   children))\n\n(defn header-label [{:keys [path]}]\n  (let [header (last path)]\n    (str (or (:label header)\n             (:id header)\n             header))))\n\n(defn column-header [props]\n  [u/default-part\n   (merge props {:children [(header-label props)]})])\n\n(defn row-header [props]\n  [u/default-part\n   (merge props {:children [(header-label props)]})])\n\n(def level count)\n\n(defn quantize [quanta threshold]\n  (dec (count (take-while #(< % threshold)\n                          (reductions + quanta)))))\n\n(assert (= 1 (quantize [10 10 10] 29)))\n(assert (= 1 (quantize [10 10 10] 30)))\n(assert (= 2 (quantize [10 10 10] 31)))\n\n(defn drag-overlay [{:keys [drag selection? mouse-x mouse-y]}]\n  [:div {:on-mouse-up   #(reset! drag nil)\n         :on-mouse-move #(do\n                           (reset! selection? true)\n                           (.preventDefault %)\n                           (reset! mouse-x (.-clientX %))\n                           (reset! mouse-y (.-clientY %)))\n         :style         {:position             \"fixed\"\n                         :top                  0\n                         :left                 0\n                         :z-index              2147483647\n                         :height               \"100%\"\n                         :width                \"100%\"\n                         #_#_:background-color \"rgba(255,0,0,0.4)\"}}])\n\n(defn selection-part [_]\n  (fn [_]\n    (let [!ref       (r/atom nil)\n          reset-ref! (partial reset! !ref)]\n      (fn [{:keys [drag selection?\n                   grid-columns grid-rows\n                   mouse-x mouse-y mouse-down-x mouse-down-y\n                   selection-grid-spec]\n            :as   props}]\n        (let []\n          [:<>\n           [:div {:ref           reset-ref!\n                  :style         {:position \"absolute\"\n                                  :height   \"100%\"\n                                  :width    \"100%\"\n                                  :top      0\n                                  :left     0}\n                  :on-mouse-up   #(reset! drag false)\n                  :on-mouse-down #(do\n                                    (if-not @selection?\n                                      (do (reset! drag ::selection)\n                                          (reset! selection? true)\n                                          (reset! mouse-down-y (.-clientY %))\n                                          (reset! mouse-down-x (.-clientX %))\n                                          (reset! mouse-y (.-clientY %))\n                                          (reset! mouse-x (.-clientX %)))\n                                      (do (reset! selection? false)\n                                          (reset! drag false)\n                                          (reset! selection-grid-spec {}))))}]\n           (when @selection?\n             (let [grid-columns  (filter number? grid-columns)\n                   grid-rows     (filter number? grid-rows)\n                   bounds        (.getBoundingClientRect @!ref)\n                   origin-x      (.-x bounds)\n                   origin-y      (.-y bounds)\n                   column-begin  (quantize grid-columns (- @mouse-down-x origin-x))\n                   column-finish (quantize grid-columns (- @mouse-x origin-x))\n                   row-begin     (quantize grid-rows (- @mouse-down-y origin-y))\n                   row-finish    (quantize grid-rows (- @mouse-y origin-y))\n                   grid-spec     {:grid-column-start (+ 2 (min column-begin column-finish))\n                                  :grid-column-end   (+ 3 (max column-begin column-finish))\n                                  :grid-row-start    (+ 2 (min row-begin row-finish))\n                                  :grid-row-end      (+ 3 (max row-begin row-finish))}\n                   _             (reset! selection-grid-spec grid-spec)]\n               [:div {:style (merge @selection-grid-spec\n                                    {:border         \"2px solid dodgerblue\"\n                                     :background     \"rgba(127,127,255,.1)\"\n                                     :position       \"relative\"\n                                     :pointer-events \"none\"})}\n                [:div {:style {:position   \"absolute\"\n                               :background \"white\"\n                               :border     \"2px solid grey\"\n                               :height     10\n                               :width      10\n                               :right      -6\n                               :bottom     -6}}]]))])))))\n\n(defn nested-grid [& {:keys [column-width row-height]\n                      :or   {column-width 60\n                             row-height   30}}]\n  (let [column-state        (r/atom {})\n        row-state           (r/atom {})\n        hover?              (r/atom false)\n        drag                (r/atom nil)\n        selection?          (r/atom nil)\n        mouse-down-x        (r/atom 0)\n        mouse-down-y        (r/atom 0)\n        last-mouse-x        (r/atom 0)\n        last-mouse-y        (r/atom 0)\n        mouse-x             (r/atom 0)\n        mouse-y             (r/atom 0)\n        scroll-top          (r/atom 0)\n        scroll-left         (r/atom 0)\n        selection-grid-spec (r/atom {})\n        column-header-prop  (fn [path k & [default]]\n                              (or (some-> @column-state (get path) (get k))\n                                  (get (meta (last path)) k)\n                                  (get (last path) k)\n                                  default))\n        header-prop         (fn [path k dimension & [default]]\n                              (let [state (-> (case dimension\n                                                :row    @row-state\n                                                :column @column-state)\n                                              (get path))]\n                                (first\n                                 (remove nil? [(get state k)\n                                               (get (meta (last path)) k)\n                                               (get (last path) k)\n                                               default]))))\n        max-props           (fn [k dimension default paths]\n                              (->> paths\n                                   (group-by level)\n                                   (sort-by key)\n                                   (map val)\n                                   (map (fn [path-group]\n                                          (apply max\n                                                 (map #(header-prop % k dimension default)\n                                                      path-group))))))\n        resize-column!      (fn [{:keys [x-distance path]}]\n                              (swap! column-state update-in [path :width]\n                                     #(-> (or %\n                                              (column-header-prop path :width column-width))\n                                          (+ x-distance)\n                                          (max 0))))\n        resize-row!         (fn [{:keys [y-distance path]}]\n                              (swap! row-state update-in [path :height]\n                                     #(-> (or %\n                                              (header-prop path :height :row row-height))\n                                          (+ y-distance)\n                                          (max 0))))\n        resize-handler      (r/atom #())]\n    (fn [& {:as passed-in-props}]\n      (let [{:as   props\n             :keys [column-tree row-tree\n                    cell-value theme-cells?\n                    pre-theme theme\n                    show-branch-paths?\n                    max-height max-width\n                    remove-empty-row-space? remove-empty-column-space?\n                    column-width column-header-height row-header-width row-height\n                    show-export-button? on-export\n                    on-export-cell on-export-column-header on-export-row-header on-export-corner-header\n                    on-init-export-fn\n                    show-zebra-stripes?\n                    show-selection-box? resize-columns? resize-rows?\n                    sticky? sticky-left sticky-top\n                    debug-parts? parts\n                    class style attr\n                    src]\n             :or   {column-header-height       25\n                    column-width               55\n                    row-header-width           80\n                    row-height                 25\n                    sticky?                    false\n                    sticky-left                0\n                    sticky-top                 0\n                    remove-empty-row-space?    true\n                    remove-empty-column-space? true\n                    show-export-button?        true\n                    show-branch-paths?         false\n                    show-selection-box?        false\n                    show-zebra-stripes?        true\n                    on-export-column-header    header-label\n                    on-export-row-header       header-label\n                    on-export-corner-header    (constantly nil)\n                    resize-columns?            true\n                    resize-rows?               false\n                    theme-cells?               true\n                    debug-parts?               (or config/debug? config/debug-parts?)}}\n            passed-in-props            #_(theme/top-level-part passed-in-props ::nested-grid)\n            {:keys [export-button column-header column-header-wrapper row-header row-header-wrapper\n                    corner-header corner-header-wrapper cell cell-wrapper zebra-stripe corner-header-grid-container\n                    column-header-grid-container row-header-grid-container cell-grid-container wrapper outer-grid-container]}\n            (merge passed-in-props parts)\n            #_#_theme                  (theme/defaults\n                                        props\n                                        {:user [(theme/<-props props {:part    ::wrapper\n                                                                      :include [:style :class]})]})\n            theme                      (theme/comp pre-theme theme)\n            column-paths               (spec->headers* column-tree)\n            column-leaf-paths          (leaf-paths column-paths)\n            leaf-column?               (set column-leaf-paths)\n            row-paths                  (spec->headers* row-tree)\n            leaf-row?                  (set (reduce (fn [paths p] (remove #(descendant? % p) paths)) row-paths row-paths))\n            leaf?                      (fn [path dimension]\n                                         (case dimension\n                                           :column (leaf-column? path)\n                                           :row    (leaf-row? path)))\n            show?                      (fn [path dimension]\n                                         (let [show-prop (header-prop path :show? dimension)\n                                               result    (and (not (false? show-prop))\n                                                              (or (true? show-prop)\n                                                                  show-branch-paths?\n                                                                  (leaf? path dimension)))]\n                                           result))\n            showing-column-paths       (filter #(show? % :column) column-paths)\n            showing-row-paths          (filter #(show? % :row) row-paths)\n            showing-column-widths      (map #(column-header-prop % :width column-width)\n                                            showing-column-paths)\n            showing-row-heights        (map #(column-header-prop % :height row-height)\n                                            showing-row-paths)\n            max-column-heights         (max-props :height :column column-header-height column-paths)\n            max-row-widths             (max-props :width :row row-header-width row-paths)\n            column-header-total-width  (apply + showing-column-widths)\n            column-header-total-height (apply + max-column-heights)\n            row-header-total-height    (apply + showing-row-heights)\n            row-header-total-width     (apply + max-row-widths)\n            all-sections               (->> (vals (group-by first column-paths))\n                                            (remove (comp #{1} count))\n                                            (mapcat #(vals (group-by level %))))\n            section-left?              (set (map first all-sections))\n            section-right?             (set (map last all-sections))\n            cell-sections              (->> (vals (group-by first showing-column-paths))\n                                            (remove (comp #{1} count))\n                                            (mapcat #(vals (group-by level %))))\n            cell-section-left?         (set (map first cell-sections))\n            cell-section-right?        (set (map last cell-sections))\n            column-depth               (count max-column-heights)\n            row-depth                  (count max-row-widths)\n            on-export-cell             (or on-export-cell (comp pr-str cell-value))\n            default-on-export          (fn on-export [{:keys [rows]}]\n                                         (->> rows (map u/tsv-line) str/join u/clipboard-write!))\n            on-export                  (or on-export default-on-export)\n            cell-grid-columns          (->> column-paths\n                                            (mapcat (fn [path]\n                                                      (let [width (header-prop path :width :column column-width)]\n                                                        (if (show? path :column)\n                                                          [path width]\n                                                          [path])))))\n            cell-grid-rows             (->> row-paths\n                                            (mapcat (fn [path]\n                                                      (let [height (header-prop path :height :row row-height)]\n                                                        (if (show? path :row)\n                                                          [path height]\n                                                          [path])))))\n            ancestry                   (fn ancestry [path]\n                                         (reverse\n                                          (take (count path)\n                                                (iterate pop path))))\n            transpose                  (partial apply mapv vector)\n            export-corner-headers      #(mapv (fn [row-index]\n                                                (mapv (fn [column-index]\n                                                        (on-export-corner-header {:row-index    row-index\n                                                                                  :column-index column-index\n                                                                                  :edge\n                                                                                  (cond-> #{}\n                                                                                    (= row-index 0)                  (conj :top)\n                                                                                    (= row-index (dec column-depth)) (conj :bottom)\n                                                                                    (= column-index 0)               (conj :left)\n                                                                                    (= column-index (dec row-depth)) (conj :right))}))\n                                                      (range row-depth)))\n                                              (range column-depth))\n            export-column-headers      #(let [export-path (fn [path]\n                                                            (on-export-column-header {:path path :row-path path}))]\n                                          (transpose (mapv (fn [path] (mapv export-path (ancestry path)))\n                                                           showing-column-paths)))\n            export-row-headers         #(let [export-path (fn [path]\n                                                            (on-export-row-header {:path path :row-path path}))]\n                                          (mapv (fn [path] (mapv export-path (ancestry path)))\n                                                showing-row-paths))\n            export-cells               #(let [{:keys [grid-row-start grid-row-end grid-column-start grid-column-end]\n                                               :as   selection-grid-spec}\n                                              @selection-grid-spec\n                                              selection?   (seq selection-grid-spec)\n                                              row-paths    (cond-> showing-row-paths\n                                                             :do        vec\n                                                             selection? (subvec (dec grid-row-start)\n                                                                                (dec grid-row-end)))\n                                              column-paths (cond-> showing-column-paths\n                                                             :do        vec\n                                                             selection? (subvec (dec grid-column-start)\n                                                                                (dec grid-column-end)))]\n                                          (->> row-paths\n                                               (mapv (fn [row-path]\n                                                       (mapv (fn [column-path]\n                                                               (let [props {:row-path    row-path\n                                                                            :column-path column-path}\n                                                                     props (cond-> props cell-value (merge {:value (cell-value props)}))]\n                                                                 (on-export-cell props)))\n                                                             column-paths)))))\n            default-export-button      (fn [{:keys [on-click]}]\n                                         [buttons/md-icon-button\n                                          {:md-icon-name \"zmdi zmdi-copy\"\n                                           :style        {:height         \"18px\"\n                                                          :font-size      \"18px\"\n                                                          :line-height    \"18px\"\n                                                          :padding-bottom 0}\n                                           :attr         {:title \"Copy to Clipboard\"}\n                                           :on-click     on-click}])\n            export-fn                  #(let [column-headers (export-column-headers)\n                                              row-headers    (export-row-headers)\n                                              corner-headers (export-corner-headers)\n                                              cells          (export-cells)\n                                              header-rows    (mapv into corner-headers column-headers)\n                                              main-rows      (mapv into row-headers cells)\n                                              rows           (concat header-rows main-rows)]\n                                          (on-export\n                                           {:column-headers column-headers\n                                            :row-headers    row-headers\n                                            :corner-headers corner-headers\n                                            :cells          cells\n                                            :header-rows    header-rows\n                                            :main-rows      main-rows\n                                            :rows           rows\n                                            :default        default-on-export}))\n            _                          (when on-init-export-fn (on-init-export-fn export-fn))\n            export-part                (u/part export-button\n                                         {:part  ::export-button\n                                          :theme theme\n                                          :props {:style    {:position :fixed\n                                                             :right    10}\n                                                  :on-click export-fn}\n                                          :impl  default-export-button})\n            column-header-cells        (for [path column-paths\n                                             :let [edge     (cond-> #{}\n                                                              (start-branch? path column-paths) (conj :left)\n                                                              (end-branch? path column-paths)   (conj :right)\n                                                              (= 1 (count path))                (conj :top)\n                                                              (= (count path) column-depth)     (conj :bottom)\n                                                              (section-left? path)              (conj :column-section-left)\n                                                              (section-right? path)             (conj :column-section-right))\n                                                   show?    (show? path :column)\n                                                   props    {:theme       theme\n                                                             :selection?  selection?\n                                                             :edge        edge\n                                                             :column-path path\n                                                             :path        path\n                                                             :header-spec (last path)\n                                                             :show?       show?\n                                                             :sticky?     sticky?\n                                                             :row-header-total-width\n                                                             row-header-total-width}\n                                                   children [(u/part column-header\n                                                               {:part  ::column-header\n                                                                :theme theme\n                                                                :props props\n                                                                :impl  re-com.nested-grid/column-header})]]]\n                                         ^{:key [::column (or path (gensym))]}\n                                         [:div {:style {:grid-column-start (path->grid-line-name path)\n                                                        :grid-column-end   (str \"span \" (cond-> path\n                                                                                          :do         (header-cross-span showing-column-paths)\n                                                                                          (not show?) dec))\n                                                        :grid-row-start    (count path)\n                                                        :grid-row-end      (str \"span \" (cond-> path\n                                                                                          :do         (header-main-span showing-column-paths)\n                                                                                          (not show?) dec))\n                                                        :position          \"relative\"}}\n                                          (u/part column-header-wrapper\n                                            {:part  ::column-header-wrapper\n                                             :theme theme\n                                             :props (merge props\n                                                           {:children children\n                                                            :attr     {:on-click (debug/log-on-alt-click props)}})})\n                                          (when (and resize-columns? show?)\n                                            [resize-button (merge props {:mouse-down-x    mouse-down-x\n                                                                         :last-mouse-x    last-mouse-x\n                                                                         :mouse-x         mouse-x\n                                                                         :resize-handler  resize-handler\n                                                                         :resize-columns? resize-columns?\n                                                                         :on-resize       resize-column!\n                                                                         :edge            edge\n                                                                         :drag            drag\n                                                                         :dimension       :column\n                                                                         :path            path})])])\n            row-header-cells\n            (for [path row-paths\n                  :let [edge (cond-> #{}\n                               (start-branch? path row-paths)                (conj :top)\n                               ;; TODO: incorrect when the final path is shallower than the tree\n                               (end-branch? path row-paths)                  (conj :bottom)\n                               (= 1 (count path))                            (conj :left)\n                               (or (= (count path) row-depth)\n                                   (= 1 (header-cross-span path row-paths))) (conj :right))\n                        show? (show? path :row)\n                        props {:theme       theme\n                               :selection?  selection?\n                               :style       {:top sticky-top}\n                               :edge        edge\n                               :row-path    path\n                               :path        path\n                               :header-spec (last path)\n                               :show?       show?\n                               :sticky?     sticky?\n                               :sticky-top  (cond-> column-header-total-height\n                                              :do                               (+ sticky-top)\n                                              (and sticky? show-export-button?) (+ 25))}\n                        children [(u/part row-header\n                                    {:part  ::row-header\n                                     :theme theme\n                                     :props props\n                                     :impl  re-com.nested-grid/row-header})]]]\n              ^{:key [::row (or path (gensym))]}\n              [:div {:style {:grid-row-start    (path->grid-line-name path)\n                             :grid-row-end      (str \"span \" (cond-> path\n                                                               :do         (header-cross-span showing-row-paths)\n                                                               (not show?) dec))\n                             :grid-column-start (count path)\n                             :grid-column-end   (str \"span \" (cond-> path\n                                                               :do         (header-main-span showing-row-paths)\n                                                               (not show?) dec))\n                             :position          \"relative\"}}\n               (u/part row-header-wrapper\n                 {:part  ::row-header-wrapper\n                  :theme theme\n                  :props (merge props {:children children\n                                       :attr     {:on-click (debug/log-on-alt-click props)}})})\n               (when (and resize-rows? show?)\n                 [resize-button (merge props {:mouse-down-x   mouse-down-x\n                                              :last-mouse-x   last-mouse-x\n                                              :mouse-x        mouse-x\n                                              :resize-handler resize-handler\n                                              :resize-rows?   resize-rows?\n                                              :on-resize      resize-row!\n                                              :edge           edge\n                                              :drag           drag\n                                              :dimension      :row\n                                              :path           path})])])\n            corner-header-cells        (for [y    (range column-depth)\n                                             x    (range row-depth)\n                                             :let [props    {:edge          (cond-> #{}\n                                                                              (zero? y)                (conj :top)\n                                                                              (zero? x)                (conj :left)\n                                                                              (= y (dec column-depth)) (conj :bottom)\n                                                                              (= x (dec row-depth))    (conj :right))\n                                                             :style         {:grid-column (inc x)\n                                                                             :grid-row    (inc y)}\n                                                             :attr          {:on-click (debug/log-on-alt-click props)}\n                                                             :theme         theme\n                                                             :column-index  x\n                                                             :row-index     y\n                                                             :x             x\n                                                             :y             y\n                                                             :corner-header corner-header}\n                                                   children [(u/part corner-header {:part  ::corner-header\n                                                                                    :theme theme\n                                                                                    :props props})]\n                                                   props    (merge props {:children children})]]\n                                         (u/part corner-header-wrapper\n                                           {:theme theme\n                                            :part  ::corner-header-wrapper\n                                            :props props}))\n            cells                      (if-not theme-cells?\n                                         (for [row-path    showing-row-paths\n                                               column-path showing-column-paths]\n                                           [cell (cond-> {:style       {:grid-column (path->grid-line-name column-path)\n                                                                        :grid-row    (path->grid-line-name row-path)}\n                                                          :row-path    row-path\n                                                          :column-path column-path}\n                                                   cell-value\n                                                   (merge {:value (cell-value {:column-path column-path :row-path row-path})})\n                                                   debug-parts?\n                                                   (merge {:attr {:on-click (re-com.debug/log-on-alt-click props)}}))])\n                                         (for [row-path    showing-row-paths\n                                               column-path showing-column-paths\n                                               :let        [edge (cond-> #{}\n                                                                   (= column-path (first showing-column-paths)) (conj :left)\n                                                                   (= column-path (last showing-column-paths))  (conj :right)\n                                                                   (= row-path (first showing-row-paths))       (conj :top)\n                                                                   (= row-path (last showing-row-paths))        (conj :bottom)\n                                                                   (cell-section-left? column-path)             (conj :column-section-left)\n                                                                   (cell-section-right? column-path)            (conj :column-section-right))\n                                                            value (when cell-value (cell-value {:column-path column-path\n                                                                                                :row-path    row-path}))\n                                                            props (cond-> {:cell  cell\n                                                                           :theme theme\n                                                                           :edge        edge\n                                                                           :column-path column-path\n                                                                           :row-path    row-path}\n                                                                    value (merge {:value value}))\n                                                            children [(u/part cell\n                                                                        {:part  ::cell\n                                                                         :theme theme\n                                                                         :props (dissoc props :cell)\n                                                                         :impl  re-com.nested-grid/cell})]]]\n                                           (u/part cell-wrapper\n                                             {:part  ::cell-wrapper\n                                              :theme theme\n                                              :props (merge props {:children children})\n                                              :impl  re-com.nested-grid/cell-wrapper})))\n            zebra-stripes              (for [i (filter even? (range 1 (inc (count row-paths))))]\n                                         ^{:key [::zebra-stripe i]}\n                                         (u/part zebra-stripe\n                                           {:theme theme\n                                            :part  ::zebra-stripe\n                                            :props {:style\n                                                    {:grid-column-start 1\n                                                     :grid-column-end   \"end\"\n                                                     :grid-row          i\n                                                     :background-color  \"#999\"\n                                                     :opacity           0.05\n                                                     :z-index           1\n                                                     :pointer-events    \"none\"}}}))\n            box-selector               [selection-part\n                                        {:drag                drag\n                                         :grid-columns        cell-grid-columns\n                                         :grid-rows           cell-grid-rows\n                                         :selection?          selection?\n                                         :mouse-x             mouse-x\n                                         :mouse-y             mouse-y\n                                         :mouse-down-x        mouse-down-x\n                                         :mouse-down-y        mouse-down-y\n                                         :selection-grid-spec selection-grid-spec}]\n            overlays                   [:<> (when (= ::selection @drag)\n                                              [drag-overlay {:drag         drag\n                                                             :grid-columns cell-grid-columns\n                                                             :grid-rows    cell-grid-rows\n                                                             :selection?   selection?\n                                                             :mouse-x      mouse-x\n                                                             :mouse-y      mouse-y\n                                                             :mouse-down-x mouse-down-x\n                                                             :mouse-down-y mouse-down-y}])\n                                        (when (#{::column ::row} @drag)\n                                          [resize-overlay {:drag         drag\n                                                           :mouse-x      mouse-x\n                                                           :mouse-y      mouse-y\n                                                           :last-mouse-x last-mouse-x\n                                                           :last-mouse-y last-mouse-y\n                                                           :on-resize    resize-handler}])]\n            ;; FIXME This changes on different browsers - do we need to get it dynamically?\n            ;; FIXME We should use :scrollbar-gutter (chrome>=94)\n            native-width               (+ u/scrollbar-tot-thick\n                                          column-header-total-width\n                                          row-header-total-width)\n            native-height              (+ u/scrollbar-thickness\n                                          column-header-total-height\n                                          row-header-total-height)\n            control-panel              [:div {:style (merge {:display          :flex\n                                                             :max-width        native-width\n                                                             :justify-content  :flex-end\n                                                             :height           25\n                                                             :background-color :white\n                                                             :z-index          2}\n                                                            (when sticky?\n                                                              {:position :sticky\n                                                               :top      sticky-top}))}\n                                        [box/v-box {:align    :center\n                                                    :justify  :center\n                                                    :style    {:position         :sticky\n                                                               :background-color :white\n                                                               :right            0\n                                                               :width            25\n                                                               :height           25\n                                                               :margin-right     10}\n                                                    :children [export-part]}]]\n            corner-headers             (u/part corner-header-grid-container\n                                         {:part  ::corner-header-grid-container\n                                          :theme theme\n                                          :props {:style    {:display               :grid\n                                                             :box-sizing            :border-box\n                                                             :position              :sticky\n                                                             :top                   (cond-> sticky-top (and sticky? show-export-button?) (+ 25))\n                                                             :left                  (if sticky? sticky-left 0)\n                                                             :grid-column-start     1\n                                                             :grid-row-start        1\n                                                             :z-index               3\n                                                             :grid-template-columns (grid-template max-row-widths)\n                                                             :grid-template-rows    (grid-template max-column-heights)}\n                                                  :children corner-header-cells}})\n            column-headers             (u/part column-header-grid-container\n                                         {:part  ::column-header-grid-container\n                                          :theme theme\n                                          :props {:style    {:position              :sticky\n                                                             :top                   (cond-> sticky-top (and sticky? show-export-button?) (+ 25))\n                                                             :width                 :fit-content\n                                                             :z-index               2\n                                                             :display               :grid\n                                                             :grid-column-start     2\n                                                             :grid-row-start        1\n                                                             :grid-template-columns (grid-template cell-grid-columns)\n                                                             :grid-template-rows    (grid-template max-column-heights)}\n                                                  :children column-header-cells}})\n            row-headers                (u/part row-header-grid-container\n                                         {:part  ::row-header-grid-container\n                                          :theme theme\n                                          :props\n                                          {:style    {:position              :sticky\n                                                      :left                  (if sticky? sticky-left 0)\n                                                      :z-index               1\n                                                      :display               :grid\n                                                      :grid-column-start     1\n                                                      :grid-row-start        2\n                                                      :grid-template-columns (grid-template max-row-widths)\n                                                      :grid-template-rows    (grid-template cell-grid-rows)}\n                                           :children row-header-cells}})\n            cells                      (u/part cell-grid-container\n                                         {:part  ::cell-grid-container\n                                          :props {:style    {:max-height            max-height\n                                                             :max-width             max-width\n                                                             :display               :grid\n                                                             :grid-column-start     2\n                                                             :grid-row-start        2\n                                                             :grid-template-columns (grid-template cell-grid-columns)\n                                                             :grid-template-rows    (grid-template cell-grid-rows)}\n                                                  :children (cond-> cells\n                                                              (and show-zebra-stripes? (> (count showing-row-paths) 3))\n                                                              (concat zebra-stripes)\n                                                              show-selection-box?\n                                                              (conj box-selector))}})]\n        (conj\n         (u/part wrapper\n           {:theme theme\n            :part  ::wrapper\n            :post-props {:style style\n                         :class class\n                         :attr  attr}\n            :props (merge {:src   src\n                           :style (merge {:flex-direction :column}\n                                         (when-not sticky?\n                                           (merge {:flex    \"0 0 auto\"\n                                                   :display :flex}\n                                                  (when remove-empty-column-space?\n                                                    {:max-width :fit-content})\n                                                  (when remove-empty-row-space?\n                                                    {:max-height :fit-content}))))\n                           :children\n                           [(when show-export-button? control-panel)\n                            (u/part outer-grid-container\n                              {:theme theme\n                               :part  ::outer-grid-container\n                               :props {:attr     {:on-mouse-enter #(reset! hover? true)\n                                                  :on-mouse-leave #(reset! hover? false)}\n                                       :style\n                                       (merge\n                                        {:position              :relative\n                                         :display               :grid\n                                         :grid-template-columns (grid-template [(px row-header-total-width)\n                                                                                (px column-header-total-width)])\n                                         :grid-template-rows    (grid-template [(px column-header-total-height)\n                                                                                \"1fr\"])}\n                                        (when-not sticky?\n                                          {:max-width  (or max-width (when remove-empty-column-space? native-width))\n                                           :max-height (or max-height\n                                                           (when remove-empty-row-space? native-height))\n                                           :flex       \"1 1 auto\"\n                                           :overflow   :auto}))\n                                       :children [corner-headers\n                                                  column-headers\n                                                  row-headers\n                                                  cells]}})\n                            overlays]}\n                          (debug/->attr passed-in-props))}))))))\n"]}