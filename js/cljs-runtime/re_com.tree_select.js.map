{"version":3,"sources":["re_com/tree_select.cljs"],"mappings":"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","names":["re-com.tree-select/tree-select-dropdown-parts-desc","re-com.config/include-args-desc?","re-com.tree-select/tree-select-dropdown-parts","cljs.core.map","cljs.core/set","re-com.tree-select/tree-select-parts-desc","re-com.tree-select/tree-select-parts","re-com.tree-select/tree-select-args-desc","re-com.validate/vector-of-maps?","re-com.validate/set-or-atom?","cljs.core/ifn?","re-com.validate/part?","cljs.core/string?","cljs.core/boolean?","re-com.validate/css-class?","re-com.validate/css-style?","re-com.validate/html-attr?","re-com.validate/parts?","cljs.core/map?","re-com.tree-select/tree-select-dropdown-args-desc","cljs.core.into","p__73146","map__73147","cljs.core/--destructure-map","cljs.core.get","re-com.tree-select/backdrop","opacity","on-click","parts","cljs.core.merge","cljs.core.get_in","or__5043__auto__","event","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","re-com.tree-select/offset","p__73173","map__73174","seq73152","self__5752__auto__","cljs.core/seq","level","re-com.box/box","js/goog.DEBUG","G__73178","G__73179","re-com.theme/merge-class","cljs.core.apply","cljs.core/str","cljs.core.repeat","p__73203","map__73204","re-com.tree-select/solo-button","solo!","p__73215","map__73216","re-com.tree-select/choice","checked?","toggle!","label","disabled?","attr","re-com.box/h-box","re-com.checkbox/checkbox","G__73223","G__73224","re-com.tree-select/choice-wrapper","_","hover?","reagent.core.atom","p__73234","map__73237","choice","showing?","show-only-button?","props","cljs.core/reset!","cljs.core/vec","re-com.box/gap","re_com.util.part","and__5041__auto__","cljs.core/deref","re-com.tree-select/group-item","p__73327","map__73328","seq73320","hide-show!","open?","G__73339","G__73340","p1__73315#","cljs.core._EQ_","re-com.tree-select/group-wrapper","p__73352","map__73354","G__73369","G__73370","re-com.util/triangle","re-com.tree-select/group?","cljs.core.comp","re-com.tree-select/ancestor-paths","path","G__73387","re-com.util/->v","cljs.core/iterate","cljs.core/butlast","cljs.core.take_while","cljs.core/identity","re-com.tree-select/infer-groups","items","cljs.core.keep","cljs.core.mapcat","p1__73392#","cljs.core.distinct","re-com.tree-select/infer-groups*","cljs.core/memoize","re-com.tree-select/toggle","s","k","cljs.core/contains?","cljs.core.disj","cljs.core.fnil","cljs.core/conj","re-com.tree-select/descendant?","group-v","item","cljs.core.take","cljs.core/count","re-com.tree-select/filter-descendants","choices","cljs.core.filter","cljs.core.partial","re-com.tree-select/filter-descendants*","re-com.tree-select/sort-items","p__73427","map__73428","seq73420","G__73421","cljs.core/first","cljs.core/next","self__5751__auto__","groups-first?","groupless?","cljs.core/nil?","lexicographic-group","p1__73418#","leaf?","cljs.core/complement","cljs.core.sort_by","cljs.core/juxt","G__73434","re-com.tree-select/group-label","clojure.string/capitalize","cljs.core/name","cljs.core/last","re-com.tree-select/current-choices","p__73451","map__73452","seq73441","G__73442","G__73443","model","id-fn","re-com.tree-select/current-groups","current-choices","re-com.tree-select/full-groups","p__73472","map__73473","seq73462","G__73463","G__73464","opts","re_com.tree_select.current_choices","current-groups","full?","p__73477","map__73478","group","descendant-ids","cljs.core/every?","re-com.tree-select/tree-select","p__73492","map__73493","seq73486","expanded-groups","initial-expanded-groups","on-group-expand","default-expanded-groups","re-com.util/deref-or-value","temp__5808__auto__","G__73510","G__73511","cljs.core/Keyword","p1__73481#","p__73516","map__73517","map__73518","group-label-fn","on-change","choice-disabled-fn","label-fn","empty-means-full?","required?","pre-theme","theme","wrapper","args","re-com.validate/validate-args","re-com.validate/extract-arg-data","re-com.theme/comp","cljs.core/empty?","re_com.tree_select.sort_items","item-props","map__73526","cljs.core.update","p1__73484#","descendants","cljs.core/some","toggle-group","G__73536","cljs.core.remove","G__73530","G__73531","fexpr__73529","clojure.set/difference","clojure.set/union","new-groups","re_com.tree_select.full_groups","group-props","G__73551","new-model","cljs.core/not","cljs.core/rest","choice-props","re-com.box/v-box","cljs.core/select-keys","cljs.core.mapv","p__73570","map__73571","re-com.tree-select/field-label","p1__73567#","item-label-fn","fexpr__73577","clojure.string.join","re-com.tree-select/distinct-by-id","coll","ids","re-com.util/item-for-id","re-com.tree-select/labelable-items","p__73611","map__73613","seq73593","G__73594","G__73595","p__73621","map__73624","full-groups","highest-groups","G__73633","vec__73635","seq__73636","first__73637","vec__73646","seq__73647","first__73648","remainder","acc","cljs.core.conj","highest-group-descendants","p1__73590#","re-com.tree-select/tree-select-dropdown","p__73688","map__73689","seq73669","internal-model","prev-model","reagent.core.create_class","this","vec__73702","seq__73703","first__73704","map__73705","reagent.core/argv","model-value","cljs.core.not_EQ_","p__73720","map__73721","width","min-width","max-width","anchor-width","min-height","max-height","anchor-height","alt-text-fn","placeholder","field-label-fn","show-reset-button?","on-reset","body-header","body-footer","change-on-blur?","state","p1__73659#","labelable-items","re_com.tree_select.labelable_items","anchor-label","G__73755","G__73756","G__73757","body","p__73759","map__73760","class","style","p1__73662#","re-com.dropdown/dropdown","G__73768","G__73775","re-com.dropdown/indicator","re-com.util/x-button","G__73765","G__73766"],"sourcesContent":["(ns re-com.tree-select\n  (:require-macros\n   [re-com.core :refer [handler-fn at]])\n  (:require\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [reagent.core          :as r]\n   [re-com.config         :refer [include-args-desc?]]\n   [re-com.dropdown       :as dd]\n   [re-com.util           :refer [deref-or-value remove-id-item ->v] :as u]\n   [re-com.box            :refer [h-box v-box box gap]]\n   [re-com.checkbox       :refer [checkbox]]\n   [re-com.validate       :as validate :refer [css-style? html-attr? parts? part? css-class?] :refer-macros [validate-args-macro]]\n   [re-com.theme :as theme]\n   re-com.tree-select.theme))\n\n(def tree-select-dropdown-parts-desc\n  (when include-args-desc?\n    (when include-args-desc?\n      [{:impl \"[v-box]\"\n        :level 0\n        :name :dropdown-wrapper\n        :notes \"Outer wrapper.\"}\n       {:name :dropdown-backdrop\n        :impl \"user-defined\"\n        :level 1\n        :notes \"Transparent, clickable backdrop. Shown when the dropdown is open.\"}\n       {:name :dropdown-anchor-wrapper\n        :impl \"[box]\"\n        :level 1\n        :notes \"Wraps the :anchor part. Opens or closes the dropdown when clicked.\"}\n       {:name :dropdown-anchor\n        :impl \"user-defined\"\n        :level 2\n        :notes \"Displays the :label or :placeholder.\"}\n       {:impl  \"[:span]\"\n        :level 3\n        :name  :label}\n       {:impl  \"[box]\"\n        :level 3\n        :name  :counter}\n       {:name :dropdown-indicator\n        :impl \"user-defined\"\n        :level 3\n        :notes \"Displays an arrow, indicating whether the dropdown is open.\"}\n       {:name :dropdown-body-wrapper\n        :impl \"[box]\"\n        :level 1\n        :notes \"Shown when the dropdown is open. Provides intelligent positioning.\"}\n       {:name :dropdown-body-header\n        :impl \"user-defined\"\n        :level 2}\n       {:name :dropdown-body-header\n        :impl \"user-defined\"\n        :level 2}\n       {:name :dropdown-body\n        :impl \"user-defined\"\n        :level 2}])))\n\n(def tree-select-dropdown-parts\n  (when include-args-desc?\n    (-> (map :name tree-select-dropdown-parts-desc) set)))\n\n(def tree-select-parts-desc\n  (when include-args-desc?\n    [{:type :legacy   :level 0 :class \"rc-tree-select\"          :impl \"[tree-select]\"}\n     {:name :wrapper  :level 1 :class \"rc-tree-select-wrapper\"  :impl \"[v-box]\"}\n     {:name :choice   :level 2 :class \"rc-tree-select-choice\"   :impl \"[h-box]\"}\n     {:name :group    :level 2 :class \"rc-tree-select-group\"    :impl \"[h-box]\"}\n     {:name :offset   :level 3 :class \"rc-tree-select-offset\"   :impl \"[box]\"}\n     {:name :expander :level 3 :class \"rc-tree-select-expander\" :impl \"[box]\"}\n     {:name :checkbox :level 3 :class \"rc-tree-select-checkbox\" :impl \"[checkbox]\"}]))\n\n(def tree-select-parts\n  (when include-args-desc?\n    (-> (map :name tree-select-parts-desc) set)))\n\n(def tree-select-args-desc\n  (when include-args-desc?\n    [{:name        :choices\n      :required    true\n      :type        \"vector of maps | r/atom\"\n      :validate-fn validate/vector-of-maps?\n      :description [:span \"Each map represents a choice. Values corresponding to id, & label are extracted by the functions \"\n                    [:code \":id-fn\"] \" & \" [:code \":label-fn\"] \". See below.\"]}\n     {:name        :model\n      :required    true\n      :type        \"a set of ids | r/atom\"\n      :validate-fn validate/set-or-atom?\n      :description [:span \"The set of the ids for currently selected choices. If nil or empty, see \"\n                    [:code \":placeholder\"] \".\"]}\n     {:name        :expanded-groups\n      :default     \"(r/atom nil)\"\n      :type        \"a set of vectors of ids | r/atom\"\n      :validate-fn validate/set-or-atom?\n      :description \"The set of currently expanded group paths.\"}\n     {:name        :on-group-expand\n      :default     \"#(reset! expanded-groups %)\"\n      :type        \"set of vectors of ids -> nil\"\n      :validate-fn ifn?\n      :description \"This function is called whenever the set of expanded groups changes. This usually happens when the user clicks one of the triangular expander icons.\"}\n     {:name        :initial-expanded-groups\n      :required    false\n      :type        \"keyword | set of paths\"\n      :description [:span \"How to expand groups when the component first mounts.\"]}\n     {:name        :on-change\n      :required    true\n      :type        \"[set of choice ids, set of group vectors]  -> nil\"\n      :validate-fn ifn?\n      :description [:span \"This function is called whenever the selection changes. It is also responsible for updating the value of \"\n                    [:code \":model\"] \" as needed.\"]}\n     {:name        :choice\n      :type        \"part\"\n      :validate-fn part?\n      :description [:span \"alpha\"]}\n     {:name        :width\n      :required    false\n      :type        \"string\"\n      :validate-fn string?\n      :description \"Width of the outer wrapper.\"}\n     {:name        :min-width\n      :required    false\n      :type        \"string\"\n      :validate-fn string?\n      :description \"Minimum width of the outer wrapper.\"}\n     {:name        :max-width\n      :required    false\n      :type        \"string\"\n      :validate-fn string?\n      :description \"Maximum width of the outer wrapper.\"}\n     {:name        :min-height\n      :required    false\n      :type        \"string\"\n      :validate-fn string?\n      :description \"Minimum height of the outer wrapper.\"}\n     {:name        :max-height\n      :required    false\n      :type        \"string\"\n      :validate-fn string?\n      :description \"Maximum height of the outer wrapper.\"}\n     {:name        :disabled?\n      :required    false\n      :default     false\n      :type        \"boolean\"\n      :description \"When true, no user selection is allowed\"}\n     {:name        :required?\n      :default     false\n      :type        \"boolean\"\n      :validate-fn boolean?\n      :description [:span \"When true, requires at least 1 choice to be selected. \"\n                    \"If clicking a choice would result in 0 choices being selected (i.e. a model value of #{}), \"\n                    \"then \" [:code \":on-change\"] \" will not be called.\"]}\n     {:name        :groups-first?\n      :required    false\n      :default     false\n      :type        \"boolean\"\n      :validate-fn boolean?\n      :description \"When true, puts groups at the top of the list. Ungrouped items will appear last.\"}\n     {:name        :choice-disabled-fn\n      :required    false\n      :default     nil\n      :type        \"choice map -> boolean\"\n      :validate-fn ifn?\n      :description [:span \"Predicate on the set of maps given by \"\n                    [:code \"choices\"] \". Disables the subset of choices for which \"\n                    [:code \"choice-disabled?\"] \" returns \" [:code \"true\"] \".\"]}\n     {:name        :id-fn\n      :required    false\n      :default     :id\n      :type        \"map -> anything\"\n      :validate-fn ifn?\n      :description [:span \"a function taking one argument (a map) and returns the unique identifier for that map. Called for each element in \" [:code \":choices\"]]}\n     {:name        :label-fn\n      :required    false\n      :default     \":label\"\n      :type        \"map -> hiccup\"\n      :validate-fn ifn?\n      :description [:span \"A function which can turn a choice into a displayable label. Will be called for each element in \"\n                    [:code \":choices\"] \". Given one argument, a choice map, it returns a string or hiccup.\"]}\n     {:name        :group-label-fn\n      :required    false\n      :default     \"(comp name last)\"\n      :type        \"vector -> hiccup\"\n      :validate-fn ifn?\n      :description [:span \"A function which can turn a group vector into a displayable label. Will be called for each element in \"\n                    [:code \":groups\"] \". Given one argument, a group vector, it returns a string or hiccup.\"]}\n     {:name        :empty-means-full?\n      :required    false\n      :default     false\n      :type        \"boolean\"\n      :validate-fn boolean?\n      :description [:span \"By default, an empty model (i.e. #{}) means that no checkboxes are checked. When \"\n                    [:code \":empty-means-full?\"]\n                    \" is true, all checkboxes appear checked when the model is empty.\"]}\n     {:name        :change-on-blur?\n      :default     true\n      :description [:span \"When true, invoke \" [:code \":on-change\"]\n                    \" function on blur, otherwise on any change (clicking any checkbox)\"],\n      :required    false\n      :type        \"boolean | r/atom\"}\n     {:name        :show-only-button?\n      :default     false\n      :type        \"boolean\"\n      :validate-fn boolean?\n      :description (str \"When true, hovering over an item causes an \\\"only\\\" button to appear. \"\n                        \"Clicking it will select that item, and deselect all others.\")}\n     {:name        :class\n      :required    false\n      :type        \"string | vector\"\n      :validate-fn css-class?\n      :description \"CSS class string, or vector of class strings (applies to the outer container).\"}\n     {:name        :style\n      :required    false\n      :type        \"CSS style map\"\n      :validate-fn css-style?\n      :description \"CSS styles to add or override (applies to the outer container)\"}\n     {:name        :attr\n      :required    false\n      :type        \"HTML attr map\"\n      :validate-fn html-attr?\n      :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br]\n                    \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the outer container)\"]}\n     {:name        :parts\n      :required    false\n      :type        \"map\"\n      :validate-fn (parts? tree-select-parts)\n      :description \"See Parts section below.\"}\n     {:name        :src\n      :required    false\n      :type        \"map\"\n      :validate-fn map?\n      :description [:span \"Used in dev builds to assist with debugging. Source code coordinates map containing keys\"\n                    [:code \":file\"] \"and\" [:code \":line\"]  \". See 'Debugging'.\"]}]))\n\n(def tree-select-dropdown-args-desc\n  (when include-args-desc?\n    (into\n     tree-select-args-desc\n     [{:name        :field-label-fn\n       :type        \"map -> string or hiccup\"\n       :validate-fn ifn?\n       :description (str \"(Dropdown version only). Accepts a map, including keys :items, :group-label-fn and :label-fn. \"\n                         \"Can return a string or hiccup, which will be rendered inside the dropdown anchor box.\")}\n      {:name        :show-reset-button?\n       :default     :false\n       :type        \"boolean | r/atom\"\n       :description \"When true, shows a small reset icon within the indicator part. By default, the icon looks like an X.\"}\n      {:name        :on-reset\n       :default     \"#(reset! model #{})\"\n       :type        \"function\"\n       :validate-fn ifn?\n       :description \"This function is called when the user clicks the reset button.\"}\n      {:name        :field-label-fn\n       :type        \"map -> string or hiccup\"\n       :validate-fn ifn?\n       :description (str \"Accepts a map, including keys :items, :group-label-fn and :label-fn. \"\n                         \"Can return a string or hiccup, which will be rendered inside the dropdown anchor box.\")}\n      {:name        :alt-text-fn\n       :type        \"map -> string\"\n       :validate-fn ifn?\n       :description (str \"Accepts a map, including keys :items, :group-label-fn and :label-fn. \"\n                         \"Returns a string that will display in the native browser tooltip that appears on mouse hover.\")}\n      {:name        :anchor-width\n       :type        \"map -> string\"\n       :validate-fn string?\n       :description [:span \"See \" [:a {:href \"#/generic-dropdown\"} \"dropdown\"]]}\n      {:name        :anchor-height\n       :type        \"map -> string\"\n       :validate-fn string?\n       :description [:span \"See \" [:a {:href \"#/generic-dropdown\"} \"dropdown\"]]}\n      {:name        :anchor-width\n       :type        \"map -> string\"\n       :validate-fn string?\n       :description [:span \"See \" [:a {:href \"#/generic-dropdown\"} \"dropdown\"]]}\n      {:name        :placeholder\n       :type        \"string\"\n       :validate-fn string?\n       :description [:span \"See \" [:a {:href \"#/generic-dropdown\"} \"dropdown\"]]}\n      {:name        :body-header\n       :type        \"part\"\n       :validate-fn part?\n       :description [:span \"See \" [:a {:href \"#/generic-dropdown\"} \"dropdown\"]]}\n      {:name        :body-footer\n       :type        \"part\"\n       :validate-fn part?\n       :description [:span \"See \" [:a {:href \"#/generic-dropdown\"} \"dropdown\"]]}])))\n\n(defn backdrop\n  [{:keys [opacity on-click parts]}]\n  [:div\n   (merge\n    (into {:class    (str \"noselect rc-backdrop \" (get-in parts [:backdrop :class]))\n           :style    (into {:position         \"fixed\"\n                            :left             \"0px\"\n                            :top              \"0px\"\n                            :width            \"100%\"\n                            :height           \"100%\"\n                            :background-color \"black\"\n                            :opacity          (or opacity 0.0)}\n                           (get-in parts [:backdrop :style]))\n           :on-click (when on-click (handler-fn (on-click)))}\n          (get-in parts [:backdrop :attr])))])\n\n(defn offset [& {:keys [parts level]}]\n  [box\n   :src (at)\n   :style (into {:visibility \"hidden\"} (get-in parts [:offset :style]))\n   :class (theme/merge-class \"rc-tree-select-offset \" (get-in parts [:offset :class]))\n   :attr (get-in parts [:offset :attr])\n   :child (apply str (repeat level \"\u2bc8\"))])\n\n(defn solo-button [{:keys [solo!]}]\n  [:a {:href \"#\" :on-click solo!} \"only\"])\n\n(defn choice [{:keys [parts checked? toggle! label disabled? attr]}]\n  [h-box\n   :justify :between\n   :children\n   [[checkbox\n     :src (at)\n     :style (get-in parts [:checkbox :style])\n     :class (theme/merge-class \"rc-tree-select-choice\"\n                               (get-in parts [:checkbox :class]))\n     :attr  (into attr (get-in parts [:checkbox :attr]))\n     :model checked?\n     :on-change toggle!\n     :label [h-box :children [label]]\n     :disabled? disabled?]]])\n\n(defn choice-wrapper [_]\n  (let [hover? (r/atom nil)]\n    (fn [{:keys [choice level showing? show-only-button?] :as props}]\n      (when showing?\n        [h-box\n         :align :center\n         :attr {:on-mouse-enter #(reset! hover? true)\n                :on-mouse-leave #(reset! hover? nil)}\n         :width \"100%\"\n         :children\n         (into\n          (vec (repeat level [gap :size \"10px\"]))\n          [(u/part choice\n             {:props props\n              :impl  re-com.tree-select/choice})\n           [gap :size \"1\"]\n           (when (and show-only-button? @hover?) [solo-button props])])]))))\n\n(defn group-item [& {:keys [checked? hide-show! showing? open? parts] :as props}]\n  (when showing?\n    [h-box\n     :src (at)\n     :style (get-in parts [:group :style])\n     :class (theme/merge-class \"rc-tree-select-group\"\n                               (get-in parts [:group :class]))\n     :attr  (get-in parts [:group :attr])\n     :children\n     [\" \"\n      [choice (into props {:attr {:ref #(when %\n                                          (set! (.-indeterminate %)\n                                                (= :some checked?)))}})]]]))\n\n(defn group-wrapper [_]\n  (let [hover? (r/atom nil)]\n    (fn [{:keys [level hide-show! parts open? showing? show-only-button?] :as props}]\n      (when showing?\n        [h-box\n         :attr {:on-mouse-enter #(reset! hover? true)\n                :on-mouse-leave #(reset! hover? nil)}\n         :width \"100%\"\n         :align :center\n         :children\n         (into\n          (vec (repeat (dec level) [gap :size \"10px\"]))\n          [[box\n            :src (at)\n            :align :center\n            :justify :center\n            :attr (into {:on-click hide-show!} (get-in parts [:expander :attr]))\n            :style (into {:cursor \"pointer\" :height \"100%\"} (get-in parts [:expander :style]))\n            :class (theme/merge-class \"rc-tree-select-expander\"\n                                      (get-in parts [:expander :class]))\n            :child\n            [u/triangle {:direction (if open? :down :right)}]]\n           (u/part re-com.tree-select/group-item\n             {:props props\n              :impl  re-com.tree-select/group-item})\n           [gap :size \"1\"]\n           (when (and show-only-button? @hover?) [solo-button props])])]))))\n\n(def group? (comp #{:group} :type))\n\n(defn ancestor-paths [path]\n  (some->> path ->v (iterate butlast) (take-while identity) (map vec)))\n\n(defn infer-groups [items]\n  (into #{} (comp\n             (keep :group)\n             (map ->v)\n             (mapcat ancestor-paths)\n             (map #(do {:type :group :group %}))\n             (distinct))\n        items))\n\n(def infer-groups* (memoize infer-groups))\n\n(defn toggle [s k]\n  (if (contains? s k)\n    (disj s k)\n    ((fnil conj #{}) s k)))\n\n(defn descendant? [group-v item]\n  (= group-v (vec (take (count group-v) (->v (:group item))))))\n\n(defn filter-descendants [group-v choices]\n  (filter (partial descendant? group-v) choices))\n\n(def filter-descendants* (memoize filter-descendants))\n\n(defn sort-items [items & {:keys [groups-first?]}]\n  (let [groupless?          (comp nil? :group)\n        lexicographic-group (comp #(apply str (->v %)) :group)\n        leaf?               (complement group?)]\n    (->> items (sort-by (apply juxt (cond->> [lexicographic-group\n                                              leaf?]\n                                      groups-first?\n                                      (into [groupless?])))))))\n\n(def group-label (comp str/capitalize name last :group))\n\n(defn current-choices [model choices & {:keys [id-fn] :or {id-fn :id}}]\n  (into #{} (filter (comp model id-fn) choices)))\n\n(defn current-groups [current-choices]\n  (infer-groups* current-choices))\n\n(defn full-groups [model choices & {:keys [id-fn] :as opts :or {id-fn :id}}]\n  (let [current-choices           (current-choices model choices opts)\n        current-groups            (current-groups current-choices)\n        full? (fn [{:keys [group]}]\n                (let [group-v        (->v group)\n                      descendant-ids (map id-fn (filter-descendants* group-v choices))]\n                  (every? model descendant-ids)))]\n    (into #{} (filter full? current-groups))))\n\n(defn tree-select\n  [& {:keys [model choices expanded-groups initial-expanded-groups on-group-expand id-fn]\n      :or   {id-fn           :id\n             expanded-groups (r/atom nil)}}]\n  (let [default-expanded-groups expanded-groups\n        on-group-expand         (or on-group-expand (partial reset! expanded-groups))\n        choices                 (deref-or-value choices)]\n    (when-some [initial-expanded-groups (deref-or-value initial-expanded-groups)]\n      (on-group-expand (case initial-expanded-groups\n                         :all    (set (map :group (infer-groups choices)))\n                         :none   #{}\n                         :chosen (into #{}\n                                       (comp (filter #(contains? (deref-or-value model) (id-fn %)))\n                                             (keep :group)\n                                             (mapcat ancestor-paths))\n                                       choices)\n                         initial-expanded-groups)))\n    (fn tree-select-render\n      [& {:keys             [model choices group-label-fn disabled? groups-first?\n                             on-change choice-disabled-fn label-fn\n                             choice on-group-expand\n                             empty-means-full? required?\n                             show-only-button?\n                             expanded-groups\n                             parts\n                             pre-theme theme]\n          :or               {expanded-groups default-expanded-groups}\n          {:keys [wrapper]} :parts\n          :as               args}]\n      (or\n       (validate-args-macro tree-select-args-desc args)\n       (let [choices         (deref-or-value choices)\n             disabled?       (deref-or-value disabled?)\n             model           (deref-or-value model)\n             label-fn        (or label-fn :label)\n             on-group-expand (or on-group-expand (partial reset! expanded-groups))\n             expanded-groups (deref-or-value expanded-groups)\n             group-label-fn  (or group-label-fn group-label)\n             theme           (theme/comp pre-theme theme)\n             full?           (or (when empty-means-full? (empty? model))\n                                 (every? model (map id-fn choices)))\n             items           (sort-items (into choices (infer-groups* choices))\n                                         :groups-first? groups-first?)\n             item            (fn [item-props]\n                               (let [{:keys [group] :as item-props} (update item-props :group ->v)]\n                                 (if (group? item-props)\n                                   (let [descendants    (filter-descendants* group choices)\n                                         descendant-ids (map id-fn descendants)\n                                         checked?       (cond\n                                                          full?                         :all\n                                                          (every? model descendant-ids) :all\n                                                          (some   model descendant-ids) :some)\n                                         toggle-group   #(->> (cond->> descendants choice-disabled-fn (remove choice-disabled-fn))\n                                                              (map id-fn)\n                                                              ((if (= :all checked?) set/difference set/union) %)\n                                                              set)\n                                         new-groups     (into #{} (map :group) (full-groups (toggle-group model)\n                                                                                            choices\n                                                                                            {:id-fn id-fn}))\n                                         group-props    {:group             item-props\n                                                         :label             (group-label-fn item-props)\n                                                         :parts             parts\n                                                         :hide-show!        (handler-fn (on-group-expand (toggle expanded-groups group)))\n                                                         :toggle!           (handler-fn\n                                                                             (let [new-model (toggle-group model)]\n                                                                               (when (or (not required?) (seq new-model))\n                                                                                 (on-change new-model new-groups))))\n                                                         :solo!             (handler-fn (let [new-model  (set descendant-ids)\n                                                                                              new-groups (into #{} (map :group) (full-groups new-model choices {:id-fn id-fn}))]\n                                                                                          (on-change new-model new-groups)))\n                                                         :open?             (contains? expanded-groups group)\n                                                         :checked?          checked?\n                                                         :model             model\n                                                         :disabled?         (or disabled? (when choice-disabled-fn (every? choice-disabled-fn descendants)))\n                                                         :showing?          (every? (set expanded-groups) (rest (ancestor-paths group)))\n                                                         :show-only-button? show-only-button?\n                                                         :level             (count group)}]\n                                     [group-wrapper group-props])\n                                   (let [level        (inc (count group))\n                                         choice-props {:item              item-props\n                                                       :choice            choice\n                                                       :model             model\n                                                       :label             (label-fn item-props)\n                                                       :parts             parts\n                                                       :showing?          (if-not group\n                                                                            true\n                                                                            (every? (set expanded-groups) (ancestor-paths group)))\n                                                       :disabled?         (or disabled? (when choice-disabled-fn (choice-disabled-fn item-props)))\n                                                       :solo!             (handler-fn (let [new-model  #{(id-fn item-props)}\n                                                                                            new-groups (into #{} (map :group) (full-groups new-model choices {:id-fn id-fn}))]\n                                                                                        (on-change new-model new-groups)))\n                                                       :toggle!           (handler-fn (let [new-model  (toggle model (id-fn item-props))\n                                                                                            new-groups (into #{} (map :group) (full-groups new-model choices {:id-fn id-fn}))]\n                                                                                        (when (or (not required?) (seq new-model))\n                                                                                          (on-change new-model new-groups))))\n                                                       :checked?          (or full? (get model (id-fn item-props)))\n                                                       :show-only-button? show-only-button?\n                                                       :level             level}]\n                                     [choice-wrapper choice-props]))))]\n         (u/part wrapper\n           {:part        ::wrapper\n            :theme       theme\n            :impl        v-box\n            :after-props (select-keys args [:width\n                                            :min-width\n                                            :max-width\n                                            :min-height\n                                            :max-height\n                                            :style\n                                            :attr])\n            :props       {:src      (at)\n                          :style    {:overflow-y \"auto\"}\n                          :children (mapv item items)}}))))))\n\n(defn field-label [{:keys [items group-label-fn label-fn]}]\n  (when (seq items)\n    (let [item-label-fn #((if (group? %) group-label-fn label-fn) %)]\n      (str/join \", \" (map item-label-fn items)))))\n\n(defn distinct-by-id [id-fn coll]\n  (let [ids (map id-fn coll)]\n    (map u/item-for-id (distinct ids) (repeat coll) (repeat {:id-fn id-fn}))))\n\n(defn labelable-items [model choices & {:keys [id-fn] :or {id-fn :id}}]\n  (let [current-choices           (into #{} (filter (comp model id-fn) choices))\n        current-groups            (infer-groups* current-choices)\n        full?                     (fn [{:keys [group]}]\n                                    (let [group-v        (->v group)\n                                          descendant-ids (map id-fn (filter-descendants* group-v choices))]\n                                      (every? model descendant-ids)))\n        full-groups               (into #{} (filter full? current-groups))\n        highest-groups            (loop [[group & remainder] (sort-by (comp count :group) full-groups)\n                                         acc                 []]\n                                    (if-not group\n                                      acc\n                                      (let [group-v (->v (:group group))]\n                                        (recur (remove (partial descendant? group-v) remainder)\n                                               (conj acc group)))))\n        highest-group-descendants (into #{} (mapcat #(filter-descendants* (:group %) current-choices) highest-groups))]\n    (->> highest-groups\n         (into current-choices)\n         (remove highest-group-descendants)\n         sort-items)))\n\n(defn tree-select-dropdown [& {:keys [expanded-groups model]\n                               :or   {expanded-groups (r/atom nil)}}]\n  (let [default-expanded-groups expanded-groups\n        showing?                (r/atom false)\n        internal-model          (r/atom (u/deref-or-value model))\n        prev-model              (r/atom (u/deref-or-value model))]\n    (r/create-class\n     {:component-did-update\n      (fn [this]\n        (let [[_ & {:keys [model]}] (r/argv this)\n              model-value           (u/deref-or-value model)]\n          (when (not= model-value\n                      (u/deref-or-value prev-model))\n            (reset! internal-model model-value)\n            (reset! prev-model model-value))))\n      :reagent-render\n      (fn tree-select-dropdown-render\n        [& {:keys [choices disabled? required?\n                   width min-width max-width anchor-width\n                   min-height max-height anchor-height\n                   on-change\n                   label-fn alt-text-fn group-label-fn model placeholder id-fn field-label-fn\n                   groups-first? initial-expanded-groups\n                   expanded-groups\n                   show-only-button? show-reset-button? on-reset\n                   label body-header body-footer choice\n                   choice-disabled-fn\n                   empty-means-full? change-on-blur?\n                   parts pre-theme theme]\n            :or   {placeholder     \"Select an item...\"\n                   label-fn        :label\n                   id-fn           :id\n                   expanded-groups default-expanded-groups}\n            :as   args}]\n        (let [change-on-blur? (u/deref-or-value change-on-blur?)\n              state           {:enable (if-not disabled? :enabled :disabled)}\n              #_#_themed      (fn [part props] (theme/apply props\n                                                            {:state       state\n                                                             :part        part\n                                                             :transition! #()}\n                                                            {:variables theme-vars\n                                                             :base      base-theme\n                                                             :main      main-theme\n                                                             :user      [theme\n                                                                         (theme/parts parts)\n                                                                         (theme/<-props args {:part    ::dropdown\n                                                                                              :include [:class :style :attr]})]}))\n              theme           (theme/comp pre-theme theme)\n              label-fn        (or label-fn :label)\n              alt-text-fn     (or alt-text-fn #(->> % :items (map (or label-fn :label)) (str/join \", \")))\n              group-label-fn  (or group-label-fn (comp name last :group))\n              field-label-fn  (or field-label-fn field-label)\n              labelable-items (labelable-items (deref-or-value model) (deref-or-value choices) {:id-fn id-fn})\n              anchor-label    (field-label-fn {:items          (distinct-by-id id-fn labelable-items)\n                                               :label-fn       label-fn\n                                               :group-label-fn group-label-fn})\n              on-reset        (or on-reset (handler-fn (on-change #{} (deref-or-value expanded-groups))))\n              body            (fn [{:keys [class style attr]}]\n                                (u/part tree-select\n                                  {:theme theme\n                                   :props {:part                    ::dropdown-body\n                                           :choices                 choices\n                                           :choice                  choice\n                                           :required?               required?\n                                           :group-label-fn          group-label-fn\n                                           :show-only-button?       show-only-button?\n                                           :expanded-groups         expanded-groups\n                                           :disabled?               disabled?\n                                           :min-width               min-width\n                                           :max-width               max-width\n                                           :min-height              min-height\n                                           :on-change               (if change-on-blur?\n                                                                      #(reset! internal-model %)\n                                                                      on-change)\n                                           :groups-first?           groups-first?\n                                           :choice-disabled-fn      choice-disabled-fn\n                                           :initial-expanded-groups initial-expanded-groups\n                                           :empty-means-full?       empty-means-full?\n                                           :id-fn                   id-fn\n                                           :label-fn                label-fn\n                                           :model                   (if change-on-blur? internal-model model)}}))]\n          (u/part (get parts :dropdown (get parts ::dropdown))\n            {:theme      theme\n             :impl       dd/dropdown\n             :post-props {:class (:class args)\n                          :style (:style args)\n                          :attr  (:attr args)}\n             :props      {:part          ::dropdown\n                          :label         (u/part label\n                                           {:theme theme\n                                            :part  ::label\n                                            :props {:src             (at)\n                                                    :model           (deref-or-value model)\n                                                    :state           state\n                                                    :placeholder     placeholder\n                                                    :label-fn        label-fn\n                                                    :group-label-fn  group-label-fn\n                                                    :labelable-items labelable-items\n                                                    :id-fn           id-fn\n                                                    :tag             :span\n                                                    :attr            {:title (alt-text-fn {:items          labelable-items\n                                                                                           :label-fn       label-fn\n                                                                                           :group-label-fn group-label-fn})}\n                                                    :children        [anchor-label]}})\n                          :placeholder   placeholder\n                          :width         width\n                          :anchor-width  anchor-width\n                          :anchor-height anchor-height\n                          :model         showing?\n                          :on-change     (when change-on-blur?\n                                           (fn [open?] (reset! showing? open?)\n                                             (when (and (not open?)\n                                                        (not= @internal-model (u/deref-or-value model)))\n                                               (on-change @internal-model))))\n                          :theme         theme\n                          :parts         (merge\n                                          {:wrapper        (:dropdown-wrapper parts)\n                                           :backdrop       (:dropdown-backdrop parts)\n                                           :anchor-wrapper (:dropdown-anchor-wrapper parts)\n                                           :anchor         (:dropdown-anchor parts)\n                                           :indicator      (fn [props]\n                                                             (u/part (get parts :dropdown-indicator (get parts ::dropdown-indicator))\n                                                               {:impl  h-box\n                                                                :theme theme\n                                                                :props {:part ::dropdown-indicator\n                                                                        :children\n                                                                        [(u/part box\n                                                                           {:theme theme\n                                                                            :props {:part  ::counter\n                                                                                    :child (str (count (if change-on-blur? @internal-model (u/deref-or-value model))))}})\n                                                                         (u/part dd/indicator\n                                                                           {:theme theme\n                                                                            :props (merge {:part ::dropdown-indicator} props)})\n                                                                         (when (u/deref-or-value show-reset-button?)\n                                                                           [u/x-button\n                                                                            {:on-click (when on-reset\n                                                                                         (handler-fn\n                                                                                          (.stopPropagation event)\n                                                                                          (on-reset (deref-or-value model)\n                                                                                                    (deref-or-value expanded-groups))))}])]}}))\n                                           :body-wrapper   (merge {:style {:width      (or width \"221px\")\n                                                                           :max-height max-height\n                                                                           :min-width  min-width}}\n                                                                  (:dropdown-body-wrapper parts))\n                                           :body-header    body-header\n                                           :body-footer    body-footer\n                                           :body           body}\n                                          (:parts (:dropdown parts)))}})))})))\n"]}