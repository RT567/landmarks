{"version":3,"sources":["re_com/part.cljs"],"mappings":";AASA,AAAKA,iBAAGC;AAER,uBAAA,+BAAAC,tDAAMS;AAAN,AAAA,IAAAR,aAAAD;IAAAE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAL,gBAAAG;IAAAA,iBAAA,AAAAG,eAAAH;QAAAE,JAAiBM;IAAjBJ,aAAAJ;IAAAK,aAAA,AAAAJ,cAAAG;IAAAE,eAAA,AAAAT,gBAAAQ;IAAAA,iBAAA,AAAAF,eAAAE;QAAAC,JAAsBG;oBAAtBJ,hBAA0BK;mBAA1BN,fAA4CO;AAA5C,AACE,GAAI,AAACC,qBAAKH;AACRC;;AACAC;;;AAEJ,AAAKE,4BAAQC;AAEb,AAAKC,wBAAU,AAACC,kBAAQ,AAACC,6CAAKC,kBAAQC;AAEtC,AAAKC,oBACH,AAACJ,kBACA,4BAAWK,KAAKC;AAAhB,AACE,IAAMC,OAAK,mCAAUC,KAAKC;AAAf,AACE,GACE,AAACC,6CAAE,AAACX,sBAAUO,GACX,AAACP,sBAAU,CAACnB,+CAAAA,qDAAAA,RAAG4B,iCAAAA;AAClBC;;AAHF,oBAIE,CAACZ,0DAAAA,gEAAAA,RAAQW,4CAAAA;AACT,sBAAA,WAAAG,1BAACC;AAAD,AAAO,gCAAAD,zBAACJ,0CAAO,aAAA,ZAAKE;GAAQ,AAAClB,qBAASiB;;AALxC;;;;AADb,AAOE,iBAAA,VAACD,KAAKF;;AAEb,oBAAA,4BAAAQ,hDAAMG;AAAN,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAcG;QAAd,AAAAF,4CAAAD,WAAA,IAAA,/DAAgBrB;AAAhB,AACE,GAAM,AAACG,qBAAKH;AAAZ,AAAeA;;AAAf;;;AAEF,AAAKyB,6BACH,qCAAKC;AAAL,AACE,qBAIK,AAACI,sDAAO,WAAKjB,/EAGbkB;AAHQ,AAAA,0FAEG,AAACzB,sBAAUO;yWANtBa,lEACA,AAACC,mBAASvB,0BAAQN,pOAClB,AAAC8B,+CAAO,6CAAA,7CAACpB,qHAAqBe,/NAC9B,AAACM,4CAAI1C;;AAMd,wBAAA,xBAAM6C,wDAAWC;AAAjB,AACE,QAAA,qFAAA,/EACK,0EAAA,1EAACC,6CAAK,AAACC,oBAAUF,kBAEjB,AAACvB,eAAkBuB;;AAE1B,AAAKG,uBACH,AAAC7B,kBACA,+BAAcmB;AAAd,AAGO,OAACW,6CAAK,WAAKtB;AAAL,AACE,IAAMkB,UAAmB,CAAC9C,+CAAAA,qDAAAA,RAAG4B,iCAAAA;IACvB0B,YAAmB,AAACnC,sBAAU2B;IADpCK,aAGuB,AAACf,kBAAMR;IAH9BuB,iBAAA,AAAAC,4BAAAD;iBAAAA,bAGWM;UAHX,AAAAJ,4CAAAF,eAAA,jEAEcI;WAFd,AAAAF,4CAAAF,eAAA,lEAEkBK;AAFlB,AAIE,yHAAA,2CAAA,+DAAA,uFAAA,8FAAA,jZAACE,uGACAD,2GACQH,kEACA,AAACT,sBAAUC,gEACX,AAACtB,kBAAMe,UAAUe,gEACjB,iBAAAK,mBAAI,wBAAA,wFAAA,9FAAMH,oDAAS,AAACI,kBAAQJ,zCACT,+CAAA,IAAA,nDAACK,vBACD,+EAAA,IAAA,nFAACA;AAFpB,AAAA,oBAAAF;AAAAA;;AAAA,IAAAA,uBAGI,uBAAA,oEAAA,zEAAMJ,KAAI,CAAA,qDAAA,LAASA;AAHvB,AAAA,oBAAAI;AAAAA;;AAAA;;;;qEAZnBpB,lEACA,AAACC,mBAASvB,0BAAQN;;AAiB5B,AAAKmD,mCACH,AAAC1C,kBACA,WAAKmB,UAAUb;AAAf,AACE,OAACqC,0BAAU,AAACzB,2BAAeC,WAAWb;;AAE3C,4BAAA,5BAAMsC,gEAAeC;AAArB,AAAwB,OAACrB,cAAI,AAACF,4CAAIvB,sBAAU8C;;AAE5C,gCAAA,hCAAMC,wEAAaC,eAAeC,KAAKC;AAAvC,AACE,IAAMC,WAAU,AAAC9B,mBAASvB,0BAAQN,qBAASwD;IACrCI,KAAU,AAACP,0BAAc,AAACtB,4CAAI1C,eAAGsE;IACjCE,SAAU,AAACR,0BAAc,AAAC1B,2BAAe6B;IACzCM,WAAU,AAAC7B,cAAI,AAACH,+CAAO+B,OAAO,AAACE,eAAKN;IACpCO,YAAU,AAAC/B,cAAI,AAACH,+CAAO8B,GAAG,AAACG,eAAK,AAAA,oFAAQN;IACxCQ,uBAGK,4CAAA,WAAAE,vDAACpC;AAAD,AAAM,AAAA,kDAAA,2DAAA,8FAAA,0DAAAoC;+FAFN,AAACd,0BAAcS,tHACf,AAACI,uDAAiB,AAACb,0BAAcW;IAGtCI,6BAIK,4CAAA,WAAAE,vDAACvC;AAAD,AAAM,AAAA,kDAAA,2DAAA,gGAAA,0DAAAuC;mHAHN,AAACrC,cAAI,AAAC8B,eAAKN,vFACX,AAACS,uDAAiBN,7GAClB,AAACS,+CAAOR;AAbnB,AAgBE,OAACU,cAAI,AAACC,sDAAOd,SACAO,uEACAG;;AAEjB,AAAKK,0BAAM,AAACC,uDAAQrE,qBAAKsE,wBAAQC,0EAAQC,qBAAKC;AAE9C,4BAAA,5BAAMC,gEAAenD;AAArB,AACE,oDAAA,mFAAA,2CAAA,qDAAA,sDAAA,6DAAA,MAAA,qDAAA,MAAA,kPAAA,yKAAA,oEAAA,n3BAACoD,udAG0B,AAACC,6BACA,AAAChD,cAAI,4CAAA,5CAACF,iGAAU,AAACO,qBAASV,8FAC3B,AAACsD,gDAAQ3B,8BAAY3B,0HAE1C,AAAClB,6CACA,AAACoB,+CAAO,mFAAA,nFAACpB,6CAAK,AAACiB,2BAAeC,kEAC9B,4CAAA,WAAAuD,vDAACpD;AAAD,AAAM,8GAAAoD,iBAAA,2CAAA,2FAAA,qDAAA,cAAA,oEAAA,mFAAA,qDAAA,iBAAA,mFAAA,+MAAA,eAAA,mFAAA,qDAAA,iBAAA,IAAA,5+BAACpC,sOAEc0B,gcAGkB,4CAAK,AAAA,mFAAAU;KAG7C,AAAC7C,qBAASV;;AAElB,kBAAA,lBAAMwD,4CAAK5B,eAAe6B,MAAMtE;AAAhC,AACE,IAAM4B,YAAU,AAACnC,sBAAUO;AAA3B,AACE,IAAAiC,mBAAI,8EAAA,6DAAA,zHAAM,AAACG,iCAAeK,eAAeb,YACnC,AAACD,4CAAiB2C,MAAM1C;AAD9B,AAAA,oBAAAK;AAAAA;;AAEI,4DAAA,mFAAA,xIAACsC,+CAAoBD,+IAAc1C;;;AAE3C,uBAAA,8BAAA4C,rDAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA/C,4BAAA+C;aAAA,AAAA9C,4CAAA8C,eAAA,pEAAuBE;YAAvB,AAAAhD,4CAAA8C,eAAA,nEAA6BG;WAA7B,AAAAjD,4CAAA8C,eAAA,lEAAmCI;eAAnC,AAAAlD,4CAAA8C,eAAA,tEAAwCK;UAAxC,AAAAnD,4CAAA8C,eAAA,oDAAA,rHAAiD5C;AAAjD,AAEE,oDAAA,7CAACoC,gIAAMpC,IAAI,uGAAA,2CAAA,+DAAA,jNAACG,0MAAc2C,8DAAaC,cAAOC,mBACxCC;;AAER,AAAA,mBAAA,2BAAAC,9CAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+CAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+CAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iDAAA,jDAAMD,4DACFpE,UAAUyD,MAAMtE,EAAEqF;AADtB,AAEG,OAACC,+CAAK,AAACjB,gBAAIxD,UAAUyD,MAAMtE,GACzB,mDAAA,nDAACuF,8CAAMF,wDAAWrF;;;AAHvB,CAAA,iDAAA,sBAAAmF,vEAAMF,4DAIFO;AAJJ,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAA1D,4BAAA0D;cAAA,AAAAzD,4CAAAyD,eAAA,rEAKgBhE;WALhB,AAAAO,4CAAAyD,eAAA,lEAIyBtD,uHAEK4C;UAN9B,AAAA/C,4CAAAyD,eAAA,jEAI8BK;YAJ9B,AAAA9D,4CAAAyD,eAAA,nEAIkCM;iBAJlC,AAAA/D,4CAAAyD,eAAA,xEAIwCO;YAJxC,AAAAhE,4CAAAyD,eAAA,nEAImDd;AAJnD,AAOG,IAAAsB,WACC,gNAAA,6CAAA,3OACE,CAACC,0DAAAA,sEAAAA,dAAUL,kDAAAA,cAAYA,aACvB,OAASA,yBAAcA,WACA,iBAAMM,YAAU,yCAAA,+CAAA,tFAAM,AAACxG,qBAAKkG,aAAY1D,OAClB,AAACgC,qBAAK0B,aAAYA,WACA1D;;IAClCwC,YACA,iBAAAyB,WAAA,2CAAA,mDAAe3E;IAAf2E,eAAA,AACoB,uGAAAA,vGAAC/D,gHAAMsC;;IAD3ByB,eAAA,uKAAAA,rJAEEL,OAAkB,2EAAAK,0CAAAA,pHAACL,sCAAAA,8DAAAA,bAAMI,0CAAAA;IAF3BC,eAAA,uLAAAA,rLAGE,AAACzG,qBAAKkG,aAAY,qHAAAO,rHAACC,kIAAeR;AAHpC,AAAA,oBAIEG;AAAkB,4HAAAI,rHAACC,kIAAeL;;AAJpCI;;;AAJN,AAAA,0FASGD,UAAUxB;;;AAbvC,AAAA,oBAcEmB;AAAI,2BAAAG,SAAA,2CAAA,xEAACK,4HAAgBR;;AAdvBG;;;;AAPH,CAAA,2CAAA,3CAAMX;;AAAN","names":["re-com.part/id","cljs.core/first","p__72262","vec__72263","seq__72264","cljs.core/seq","first__72265","cljs.core/next","vec__72266","seq__72267","first__72268","re-com.part/children","a","b","rest-children","all-children","cljs.core/map?","re-com.part/branch?","cljs.core/sequential?","re-com.part/unqualify","cljs.core/memoize","cljs.core.comp","cljs.core/keyword","cljs.core/name","re-com.part/depth","tree","k","walk","node","depth","cljs.core._EQ_","p1__72270#","cljs.core/some","p__72272","vec__72273","cljs.core.nth","re-com.part/props","_","re-com.part/top-level-args","structure","cljs.core/tree-seq","cljs.core.filter","cljs.core.map","cljs.core.mapcat","cljs.core/set","re-com.part/css-class","part-id","cljs.core.subs","cljs.core/namespace","re-com.part/describe","cljs.core.mapv","map__72292","cljs.core/--destructure-map","cljs.core.get","part-name","tag","impl","part-props","cljs.core.merge","or__5043__auto__","cljs.core/ns-name","clojure.string/replace","re-com.part/top-level-arg?","cljs.core/contains?","re-com.part/unqualify-set","s","re-com.part/args-valid?","part-structure","args","problems","part-seq","ks","top-ks","top-args","cljs.core/keys","part-args","top-level-collisions","clojure.set.intersection","p1__72301#","top-level-unsupported-keys","cljs.core.remove","p1__72302#","cljs.core/vec","cljs.core.concat","re-com.part/part?","cljs.core.some_fn","cljs.core/string?","cljs.core/vector?","cljs.core/ifn?","cljs.core/nil?","re-com.part/describe-args","cljs.core.into","re-com.validate/parts?","cljs.core.partial","p1__72303#","re-com.part/get","props","cljs.core.get_in","p__72305","map__72306","re-com.part/default","class","style","attr","children","var_args","G__72308","re-com.part/part","js/Error","p__72309","map__72310","opts","re_com.part.part","cljs.core.assoc","part-value","key","theme","post-props","G__72311","re-com.util/hiccup?","component","G__72312","re_com.theme.util.merge_props","cljs.core/with-meta"],"sourcesContent":["(ns re-com.part\n  (:refer-clojure :exclude [name get])\n  (:require\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [re-com.theme.util :as tu]\n   [re-com.validate :as validate]\n   [re-com.util :as u]))\n\n(def id first)\n\n(defn children [[a & [b & rest-children :as all-children]]]\n  (if (map? b)\n    rest-children\n    all-children))\n\n(def branch? sequential?)\n\n(def unqualify (memoize (comp keyword clojure.core/name)))\n\n(def depth\n  (memoize\n   (fn depth [tree k]\n     (let [walk (fn walk [node depth]\n                  (cond\n                    (= (unqualify k)\n                       (unqualify (id node)))\n                    depth\n                    (branch? node)\n                    (some #(walk % (inc depth)) (children node))))]\n       (walk tree 1)))))\n\n(defn props [[_ b]]\n  (when (map? b) b))\n\n(def top-level-args\n  (fn [structure]\n    (->> structure\n         (tree-seq branch? children)\n         (filter (comp :top-level-arg? props))\n         (map id)\n         (mapcat (fn [k]\n                   [#_k ;;TODO support qualified keys?\n                    (unqualify k)]))\n         set)))\n\n(defn css-class [part-id]\n  (str \"rc-\"\n       (subs (namespace part-id) 7)\n       \"-\"\n       (clojure.core/name part-id)))\n\n(def describe\n  (memoize\n   (fn describe [structure]\n     (->> structure\n          (tree-seq branch? children)\n          (mapv (fn [node]\n                  (let [part-id            (id node)\n                        part-name          (unqualify part-id)\n                        {:keys [tag impl]\n                         :as part-props} (props node)]\n                    (merge\n                     part-props\n                     {:name  part-name\n                      :class (css-class part-id)\n                      :level (depth structure part-name)\n                      :impl  (or (when impl (-> (ns-name impl)\n                                                (str/replace \"$\" \".\")\n                                                (str/replace \"_\" \"-\")))\n                                 (when tag (str \"[\" tag \"]\"))\n                                 \"[:div]\")}))))))))\n\n(def top-level-arg?\n  (memoize\n   (fn [structure k]\n     (contains? (top-level-args structure) k))))\n\n(defn unqualify-set [s] (set (map unqualify s)))\n\n(defn args-valid? [part-structure args problems]\n  (let [part-seq  (tree-seq branch? children part-structure)\n        ks        (unqualify-set (map id part-seq))\n        top-ks    (unqualify-set (top-level-args part-structure))\n        top-args  (set (filter top-ks (keys args)))\n        part-args (set (filter ks (keys (:parts args))))\n        top-level-collisions\n        (->> (unqualify-set top-args)\n             (set/intersection (unqualify-set part-args))\n             (map #(do {:problem  :part-top-level-collision\n                        :arg-name %})))\n        top-level-unsupported-keys\n        (->> (set (keys args))\n             (set/intersection ks)\n             (remove top-ks)\n             (map #(do {:problem  :part-top-level-unsupported\n                        :arg-name %})))]\n    (vec (concat problems\n                 top-level-collisions\n                 top-level-unsupported-keys))))\n\n(def part? (some-fn map? string? vector? ifn? nil?))\n\n(defn describe-args [structure]\n  (into [{:name              :parts\n          :required          false\n          :type              \"map\"\n          :validate-fn       (validate/parts?\n                              (set (map :name (describe structure))))\n          :parts-validate-fn (partial args-valid? structure)\n          :description       \"See Parts section below.\"}]\n        (comp\n         (filter (comp (top-level-args structure) :name))\n         (map #(merge\n                %\n                {:validate-fn part?\n                 :type        \"re-com part\"\n                 :description\n                 [:span \"Overrides the \" [:code (str (:name %))]\n                  \" key within \" [:code \":parts\"] \".\"\n                  \" See the parts section below for details.\"]})))\n        (describe structure)))\n\n(defn get [part-structure props k]\n  (let [part-name (unqualify k)]\n    (or (when (top-level-arg? part-structure part-name)\n          (clojure.core/get props part-name))\n        (clojure.core/get-in props [:parts part-name]))))\n\n(defn default [{:keys [class style attr children tag]\n                :or   {tag :div}}]\n  (into [tag (merge {:class class :style style} attr)]\n        children))\n\n(defn part\n  ([structure props k opts]\n   (part (get structure props k)\n     (assoc opts :part k)))\n  ([part-value {:keys   [impl key theme post-props props]\n                part-id :part\n                :or     {impl default}}]\n   (cond->\n    (cond\n      (u/hiccup? part-value) part-value\n      (string? part-value)   part-value\n      :else                  (let [component (cond (map? part-value) impl\n                                                   (ifn? part-value) part-value\n                                                   :else             impl)\n                                   props\n                                   (cond-> {:part part-id}\n                                     :do               (merge props)\n                                     theme             (theme component)\n                                     (map? part-value) (tu/merge-props part-value)\n                                     post-props        (tu/merge-props post-props))]\n                               [component props]))\n     key (with-meta {:key key}))))\n\n"]}