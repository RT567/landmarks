{"version":3,"sources":["re_com/nested_grid/theme.cljs"],"mappings":"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","names":["re-com.nested-grid.theme/cell-wrapper-base","re-com.theme.default/base","props","cljs.core.update","cljs.core/merge","re-com.nested-grid.theme/row-header-wrapper-base","re-com.theme.default/main","p__73334","map__73336","cljs.core/--destructure-map","map__73337","cljs.core.get","map__73338","header-spec","sm-4","sm-3","light-background","border-dark","border","map__73345","align-column","align-column-header","align","or__5043__auto__","re-com.nested-grid.theme/row-header-wrapper-main","map__73363","map__73364","sm-6","re-com.theme.default/golden-section-50","re-com.theme.default/colors","p__73379","map__73380","map__73381","map__73382","cljs.core/contains?","re-com.theme.util/merge-style","re-com.nested-grid.theme/cell-wrapper-main","map__73402","p__73408","map__73410","edge","value","column-path","cljs.core/some","cljs.core/seq","p__73414","map__73415"],"sourcesContent":["(ns re-com.nested-grid.theme\n  (:require\n   [re-com.theme.util :refer [merge-style]]\n   [re-com.theme.default :refer [base main golden-section-50 colors]]\n   [re-com.nested-grid :as-alias ng]))\n\n(def cell-wrapper-base {#_#_:pointer-events \"none\"\n                        :user-select        \"none\"\n                        :overflow           \"hidden\"\n                        :position           \"relative\"})\n\n(defmethod base ::ng/cell-wrapper [props]\n  (update props :style merge cell-wrapper-base))\n\n(def row-header-wrapper-base {:user-select        \"none\"\n                              :height             \"100%\"})\n\n(defmethod base ::ng/row-header-wrapper [props]\n  (update props :style merge row-header-wrapper-base))\n\n(defmethod base ::ng/column-header-wrapper [props]\n  (update props :style merge\n          {:user-select \"none\"\n           :width       \"100%\"\n           :height      \"100%\"}))\n\n(defmethod main ::ng/column-header-wrapper\n  [{:keys        [header-spec]\n    {{:keys [sm-4 sm-3 light-background border-dark border]}\n     :variables} :re-com\n    :as          props}]\n  (let [{:keys [align-column align-column-header align]} header-spec]\n    (update props :style merge\n            {:padding-top      sm-3\n             :padding-right    sm-4\n             :padding-left     sm-4\n             :white-space      :nowrap\n             :text-overflow    :ellipsis\n             :overflow         :hidden\n             :background-color light-background\n             :color            \"#666\"\n             :text-align       (or align-column-header align-column align :center)\n             :font-size        \"13px\"\n             :border-top       (when (get (:edge props) :top) (str \"thin solid \" border-dark))\n             :border-bottom    (str \"thin solid \" border)\n             :border-right     (cond\n                                 (get (:edge props) :column-section-right)\n                                 (str \"thin\" \" solid \" border-dark)\n                                 (get (:edge props) :right)\n                                 (str \"thin\" \" solid \" border-dark)\n                                 :else\n                                 (str \"thin\" \" solid \" border))})))\n\n(defmethod base ::ng/row-header\n  [props]\n  (update props :style merge {:width         \"100%\"\n                              :text-overflow :ellipsis\n                              :overflow      :hidden\n                              :white-space   :nowrap\n                              :position      :sticky}))\n\n(defmethod base ::ng/column-header\n  [props]\n  (update props :style merge {:height        \"100%\"\n                              :text-overflow :ellipsis\n                              :overflow      :hidden\n                              :whitespace    :nowrap}))\n\n(def row-header-wrapper-main\n  (let [{:keys [sm-3 sm-6]}        golden-section-50\n        {:keys [light-background]} colors]\n    {:padding-top      sm-3\n     :padding-right    sm-3\n     :padding-left     sm-6\n     :background-color light-background\n     :color            \"#666\"\n     :text-align       \"left\"\n     :font-size        \"13px\"\n     :white-space      \"nowrap\"\n     :border-left      \"thin solid #ccc\"\n     :border-bottom    \"thin solid #ccc\"}))\n\n(defmethod base ::ng/corner-header-wrapper\n  [props]\n  (update props :style merge row-header-wrapper-base))\n\n(defmethod main ::ng/corner-header-wrapper\n  [{{{:keys [border-dark border light-background]} :variables} :re-com :as props}]\n  (update props :style merge\n          row-header-wrapper-main\n          {:overflow      \"hidden\"\n           :text-overflow \"ellipsis\"\n           :white-space   \"nowrap\"}\n          {:border-left      (when (contains? (:edge props) :left)\n                               (str \"thin\" \" solid \" border-dark))\n           :border-top       (when (get (:edge props) :top)\n                               (str \"thin solid \" border-dark))\n           :border-bottom    (when (get (:edge props) :bottom)\n                               (str \"thin solid \" border))\n           :border-right     (when (get (:edge props) :right)\n                               (str \"thin\" \" solid \" border))\n           :background-color light-background}))\n\n(defmethod base ::ng/cell-grid-container\n  [props]\n  (merge-style props\n               {:position \"relative\"\n                :gap      \"0px\"}))\n\n(defmethod main ::ng/cell-grid-container\n  [props]\n  (merge-style props\n               {:padding          \"0px\"\n                :background-color \"transparent\"}))\n\n(def cell-wrapper-main\n  (let [{:keys [sm-3]} golden-section-50]\n    {:font-size        12\n     :background-color \"white\"\n     :color            \"#777\"\n     :padding-top      sm-3\n     :padding-right    sm-3\n     :padding-left     sm-3\n     :text-align :right\n     :border-right \"thin solid #ccc\"\n     :border-bottom \"thin solid #ccc\"}))\n\n(defmethod main ::ng/cell-wrapper\n  [{:keys [edge value column-path] :as props}]\n  (let [align (some :align column-path)]\n    (update props :style merge\n            cell-wrapper-main\n            (cond align\n                  {:text-align align}\n                  (string? value)\n                  {:text-align :left})\n            (when (seq edge)\n              {:border-right  (cond\n                                (contains? edge :column-section-right)\n                                \"thin solid #aaa\"\n                                (contains? edge :right)\n                                \"thin solid #aaa\"\n                                :else\n                                \"thin solid #ccc\")\n               :border-bottom (if (contains? edge :bottom)\n                                \"thin solid #aaa\"\n                                \"thin solid #ccc\")}))))\n\n(defmethod main ::ng/row-header-wrapper\n  [{:keys [edge] :as props}]\n  (update props :style merge\n          row-header-wrapper-main\n          (when (contains? edge :right)\n            {:border-right \"thin solid #aaa\"})\n          (when (contains? edge :left)\n            {:border-left \"thin solid #aaa\"})\n          (when (contains? edge :bottom)\n            {:border-bottom \"thin solid #aaa\"})))\n"]}