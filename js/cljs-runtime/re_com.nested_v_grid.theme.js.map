{"version":3,"sources":["re_com/nested_v_grid/theme.cljs"],"mappings":";AAOA,0CAAA,1CAAKA;AACL,yCAAA,zCAAKC;AAEL,AAAA,mCAAA,2CAAAC,9EAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,sEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,wEAAA,xEAAME,mFAAOM,MAAQC;AAArB,AAAyB,4EAAA,rEAACC,8CAAMC,iBAAOH,6DAAaI,gBAAMH;;;AAA1D,CAAA,2DAAA,3DAAMP;;AAAN;AAAA,CAAA,qDAAA,WAAAC,hEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAEA,AAAAU,uEAAA,kGAAA,WAA+BL;AAA/B,AACE,qIAAA,2CAAA,6DAAA,qDAAA,sDAAA,WAAA,0DAAA,tZAACM,sEAAMN;;AAIT,AAAAK,uEAAA,sGAAA,WACGL;AADH,AAEE,qIAAA,2CAAA,0DAAA,oDAAA,6DAAA,yDAAA,0EAAA,IAAA,8EAAA,ziBAACM,sEAAMN;;AAKT,AAAAK,uEAAA,wHAAA,WACGL;AADH,AAEE,qIAAA,2CAAA,0DAAA,oDAAA,6DAAA,yDAAA,8DAAA,0DAAA,oDAAA,zjBAACM,sEAAMN;;AAKT,AAAAK,uEAAA,iHAAA,WACGL;AADH,AAEE,qIAAA,2CAAA,0DAAA,oDAAA,8DAAA,0DAAA,qDAAA,pcAACM,sEAAMN;;AAIT,AAAAK,uEAAA,sHAAA,WACGL;AADH,AAEE,qIAAA,2CAAA,8DAAA,0DAAA,0DAAA,oDAAA,0EAAA,IAAA,8EAAA,IAAA,qDAAA,IAAA,oDAAA,5pBAACM,sEAAMN;;AAOT,AAAKO,yCACH,iBAAAC,aAAiCM;IAAjCN,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAcI;WAAd,AAAAF,4CAAAF,eAAA,lEAAmBK;IAAnBF,aACiCK;IADjCL,iBAAA,AAAAF,4BAAAE;uBAAA,AAAAD,4CAAAC,eAAA,9EACcI;AADd,AAAA,+CAAA,wEAAA,uDAAA,mEAAA,gEAAA,6DAAA,4EAAA,wEAAA,mEAAA,wEAAA,4DAAA,OAAA,wDAAA,KAAA,+EAEqBH,LACAC,UACAA,3BACAE;;AAOvB,AAAAE,uEAAA,8GAAA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAV,4BAAAU;YAAAA,RACqBnB;WADrB,AAAAU,4CAAAS,eAAA,lEACWC;AADX,AAEE,qIAAA,9HAACd,sEAAMN,2FACA,wNAAA,AAAA,2CAAA,iHAAA,lWAAM,yEAAA,sEAAA,9IAACoB,qCAAAA,0FAAAA,kLAAwBlC,sDAC/B,8NAAA,AAAA,2CAAA,qHAAA,5WAAM,yEAAA,yEAAA,jJAACkC,qCAAAA,6FAAAA,yLAA4BlC,sDACnC,oOAAA,AAAA,2CAAA,uHAAA,pXAAM,yEAAA,4EAAA,pJAACkC,qCAAAA,gGAAAA,8LAA8BlC,sDACrC,0NAAA,AAAA,2CAAA,oHAAA,vWAAM,yEAAA,uEAAA,/IAACkC,qCAAAA,2FAAAA,sLAA0BlC","names":["re-com.nested-v-grid.theme/border-light","re-com.nested-v-grid.theme/border-dark","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","re-com.nested-v-grid.theme/style","seq73552","G__73553","cljs.core/first","cljs.core/next","self__5751__auto__","props","ms","cljs.core.apply","cljs.core/update","cljs.core/merge","re-com.theme.default/base","re_com.nested_v_grid.theme.style","re-com.nested-v-grid.theme/header-main","map__73591","cljs.core/--destructure-map","cljs.core.get","map__73592","sm-3","sm-4","re-com.theme.default/golden-section-50","light-background","re-com.theme.default/colors","re-com.theme.default/main","p__73601","map__73604","edge"],"sourcesContent":["(ns re-com.nested-v-grid.theme\n  (:require\n   [re-com.theme.default :as default :refer [base main]]\n   [re-com.nested-v-grid :as-alias nvg]))\n\n;; NOTE: See re-com.css for styling of cells & headers\n\n(def border-light \"thin solid #ccc\")\n(def border-dark \"thin solid #aaa\")\n\n(defn style [props & ms] (apply update props :style merge ms))\n\n(defmethod base ::nvg/wrapper [props]\n  (style props {:overflow :auto\n                :flex     \"1 1 auto\"\n                :display  :grid}))\n\n(defmethod base ::nvg/cell-grid\n  [props]\n  (style props {:display           :grid\n                :overflow :hidden\n                :grid-row-start    2\n                :grid-column-start 2}))\n\n(defmethod base ::nvg/column-header-grid\n  [props]\n  (style props {:display  :grid\n                :overflow :hidden\n                :position :sticky\n                :top      0}))\n\n(defmethod base ::nvg/row-header-grid\n  [props]\n  (style props {:display  :grid\n                :position :sticky\n                :left      0}))\n\n(defmethod base ::nvg/corner-header-grid\n  [props]\n  (style props {:position          :sticky\n                :display           :grid\n                :grid-row-start    1\n                :grid-column-start 1\n                :left              0\n                :top               0}))\n\n(def header-main\n  (let [{:keys [sm-3 sm-4]}        default/golden-section-50\n        {:keys [light-background]} default/colors]\n    {:padding-top      sm-3\n     :padding-right    sm-4\n     :padding-left     sm-4\n     :background-color light-background\n     :color            \"#666\"\n     :font-size        13\n     :text-overflow    :ellipsis\n     :overflow         :hidden\n     :white-space      :nowrap}))\n\n(defmethod main ::nvg/corner-header\n  [{:keys [edge] :as props}]\n  (style props {}\n         (when (edge :top) {:border-top border-light})\n         (when (edge :right) {:border-right border-light})\n         (when (edge :bottom) {:border-bottom border-light})\n         (when (edge :left) {:border-left border-light})))\n"]}